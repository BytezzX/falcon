-- Gui to Lua
-- Version: 3.2

-- Instances:

local ScreenGui = Instance.new("ScreenGui")
local TextButton = Instance.new("TextButton")
local h = Instance.new("Frame")
local TextLabel = Instance.new("TextLabel")
local TextButton_2 = Instance.new("TextButton")
local Frame = Instance.new("Frame")
local esp = Instance.new("TextButton")
local infjump = Instance.new("TextButton")
local TextLabel_2 = Instance.new("TextLabel")
local CraftAnyItem = Instance.new("TextButton")
local CraftItem = Instance.new("TextBox")
local Speed = Instance.new("TextButton")
local infyield = Instance.new("TextButton")
local SpeedBind = Instance.new("TextBox")
local clicktp = Instance.new("TextButton")
local antiban = Instance.new("TextButton")
local wall = Instance.new("TextButton")
local autocamp = Instance.new("TextButton")
local tpspamus = Instance.new("TextBox")
local dropitemos = Instance.new("TextButton")
local tpspam = Instance.new("TextButton")
local itemname = Instance.new("TextBox")
local itemkeybind = Instance.new("TextBox")
local chest = Instance.new("TextButton")
local ScrollingFrame = Instance.new("ScrollingFrame")
local goober = Instance.new("TextButton")
local magm = Instance.new("TextButton")
local magg = Instance.new("TextButton")
local magc = Instance.new("TextButton")
local peep = Instance.new("TextButton")
local rad = Instance.new("TextButton")
local magb = Instance.new("TextButton")
local spirkey = Instance.new("TextButton")
local TextLabel_3 = Instance.new("TextLabel")
local rain = Instance.new("TextButton")
local TextLabel_4 = Instance.new("TextLabel")
local TextLabel_5 = Instance.new("TextLabel")
local TextLabel_6 = Instance.new("TextLabel")
local frname = Instance.new("TextBox")
local plant = Instance.new("TextButton")
local ah = Instance.new("Frame")
local TextLabel_7 = Instance.new("TextLabel")

--Properties:

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

TextButton.Parent = ScreenGui
TextButton.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
TextButton.BorderColor3 = Color3.fromRGB(144, 47, 139)
TextButton.Position = UDim2.new(0.00398681685, 0, 0.679894209, 0)
TextButton.Size = UDim2.new(0, 99, 0, 43)
TextButton.ZIndex = 1000000000
TextButton.Font = Enum.Font.GothamBlack
TextButton.Text = "Open FX"
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextSize = 14.000

h.Name = "h"
h.Parent = ScreenGui
h.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
h.BorderColor3 = Color3.fromRGB(144, 47, 139)
h.Position = UDim2.new(0.136093557, 0, 0.421428531, 0)
h.Size = UDim2.new(0, 644, 0, 28)
h.ZIndex = 1000000000

TextLabel.Parent = h
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Position = UDim2.new(-0.0226582773, 0, 0.0357142873, 0)
TextLabel.Size = UDim2.new(0, 122, 0, 28)
TextLabel.ZIndex = 1000000000
TextLabel.Font = Enum.Font.GothamBlack
TextLabel.Text = "FALCON X"
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextSize = 14.000

TextButton_2.Parent = h
TextButton_2.BackgroundColor3 = Color3.fromRGB(153, 19, 84)
TextButton_2.BorderColor3 = Color3.fromRGB(153, 19, 84)
TextButton_2.Position = UDim2.new(0.955809057, 0, -0.0357142873, 0)
TextButton_2.Size = UDim2.new(0, 28, 0, 28)
TextButton_2.ZIndex = 1000000000
TextButton_2.Font = Enum.Font.SourceSans
TextButton_2.Text = "X"
TextButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton_2.TextSize = 25.000

Frame.Parent = h
Frame.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
Frame.BorderColor3 = Color3.fromRGB(175, 57, 169)
Frame.Position = UDim2.new(0, 0, 0.964286268, 0)
Frame.Size = UDim2.new(0, 644, 0, 304)
Frame.ZIndex = 1000000000

esp.Name = "esp"
esp.Parent = Frame
esp.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
esp.BorderColor3 = Color3.fromRGB(144, 47, 139)
esp.Position = UDim2.new(0.201503485, 0, 0.350084186, 0)
esp.Size = UDim2.new(0, 94, 0, 31)
esp.ZIndex = 1000000000
esp.Font = Enum.Font.GothamBlack
esp.Text = "ESP (WON'T WORK ON WRD)"
esp.TextColor3 = Color3.fromRGB(0, 0, 0)
esp.TextScaled = true
esp.TextSize = 14.000
esp.TextWrapped = true

infjump.Name = "infjump"
infjump.Parent = Frame
infjump.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
infjump.BorderColor3 = Color3.fromRGB(144, 47, 139)
infjump.Position = UDim2.new(0.0319682732, 0, 0.3513771, 0)
infjump.Size = UDim2.new(0, 94, 0, 31)
infjump.ZIndex = 1000000000
infjump.Font = Enum.Font.GothamBlack
infjump.Text = "Infinite Jump"
infjump.TextColor3 = Color3.fromRGB(0, 0, 0)
infjump.TextScaled = true
infjump.TextSize = 14.000
infjump.TextWrapped = true

TextLabel_2.Parent = infjump
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.BackgroundTransparency = 1.000
TextLabel_2.Position = UDim2.new(0.180851042, 0, 0.903225839, 0)
TextLabel_2.Size = UDim2.new(0, 59, 0, 22)
TextLabel_2.ZIndex = 1000000000
TextLabel_2.Font = Enum.Font.SourceSans
TextLabel_2.Text = "Toggle = M"
TextLabel_2.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.TextSize = 14.000

CraftAnyItem.Name = "CraftAnyItem"
CraftAnyItem.Parent = Frame
CraftAnyItem.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
CraftAnyItem.BorderColor3 = Color3.fromRGB(99, 32, 96)
CraftAnyItem.Position = UDim2.new(0.202920824, 0, 0.178418353, 0)
CraftAnyItem.Size = UDim2.new(0, 94, 0, 31)
CraftAnyItem.ZIndex = 1000000000
CraftAnyItem.Font = Enum.Font.GothamBlack
CraftAnyItem.Text = "CRAFT"
CraftAnyItem.TextColor3 = Color3.fromRGB(0, 0, 0)
CraftAnyItem.TextScaled = true
CraftAnyItem.TextSize = 14.000
CraftAnyItem.TextWrapped = true

CraftItem.Name = "CraftItem"
CraftItem.Parent = Frame
CraftItem.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
CraftItem.BorderColor3 = Color3.fromRGB(255, 255, 255)
CraftItem.Position = UDim2.new(0.202956513, 0, 0.0430000015, 0)
CraftItem.Size = UDim2.new(0, 94, 0, 30)
CraftItem.ZIndex = 1000000000
CraftItem.Font = Enum.Font.GothamBlack
CraftItem.PlaceholderColor3 = Color3.fromRGB(0, 0, 0)
CraftItem.PlaceholderText = "Item Name"
CraftItem.Text = ""
CraftItem.TextColor3 = Color3.fromRGB(0, 0, 0)
CraftItem.TextScaled = true
CraftItem.TextSize = 15.000
CraftItem.TextWrapped = true

Speed.Name = "Speed"
Speed.Parent = Frame
Speed.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
Speed.BorderColor3 = Color3.fromRGB(99, 32, 96)
Speed.Position = UDim2.new(0.0319683254, 0, 0.178418383, 0)
Speed.Size = UDim2.new(0, 94, 0, 31)
Speed.ZIndex = 1000000000
Speed.Font = Enum.Font.GothamBlack
Speed.Text = "SPEED"
Speed.TextColor3 = Color3.fromRGB(0, 0, 0)
Speed.TextScaled = true
Speed.TextSize = 14.000
Speed.TextWrapped = true

infyield.Name = "infyield"
infyield.Parent = Frame
infyield.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
infyield.BorderColor3 = Color3.fromRGB(144, 47, 139)
infyield.Position = UDim2.new(0.370947957, 0, 0.512561321, 0)
infyield.Size = UDim2.new(0, 94, 0, 31)
infyield.ZIndex = 1000000000
infyield.Font = Enum.Font.GothamBlack
infyield.Text = "Infinite Yield (Admin)"
infyield.TextColor3 = Color3.fromRGB(0, 0, 0)
infyield.TextScaled = true
infyield.TextSize = 14.000
infyield.TextWrapped = true

SpeedBind.Name = "SpeedBind"
SpeedBind.Parent = Frame
SpeedBind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SpeedBind.BorderColor3 = Color3.fromRGB(255, 255, 255)
SpeedBind.Position = UDim2.new(0.0333333351, 0, 0.0435835719, 0)
SpeedBind.Size = UDim2.new(0, 94, 0, 30)
SpeedBind.ZIndex = 1000000000
SpeedBind.Font = Enum.Font.GothamBlack
SpeedBind.PlaceholderColor3 = Color3.fromRGB(0, 0, 0)
SpeedBind.PlaceholderText = "Keybind"
SpeedBind.Text = ""
SpeedBind.TextColor3 = Color3.fromRGB(0, 0, 0)
SpeedBind.TextScaled = true
SpeedBind.TextSize = 14.000
SpeedBind.TextWrapped = true

clicktp.Name = "click tp"
clicktp.Parent = Frame
clicktp.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
clicktp.BorderColor3 = Color3.fromRGB(144, 47, 139)
clicktp.Position = UDim2.new(0.371081591, 0, 0.349822938, 0)
clicktp.Size = UDim2.new(0, 94, 0, 31)
clicktp.ZIndex = 1000000000
clicktp.Font = Enum.Font.GothamBlack
clicktp.Text = "Click TP (Press F)"
clicktp.TextColor3 = Color3.fromRGB(0, 0, 0)
clicktp.TextScaled = true
clicktp.TextSize = 14.000
clicktp.TextWrapped = true

antiban.Name = "antiban"
antiban.Parent = Frame
antiban.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
antiban.BorderColor3 = Color3.fromRGB(144, 47, 139)
antiban.Position = UDim2.new(0.0331460834, 0, 0.670456111, 0)
antiban.Size = UDim2.new(0, 94, 0, 31)
antiban.ZIndex = 1000000000
antiban.Font = Enum.Font.GothamBlack
antiban.Text = "Anti-Ban"
antiban.TextColor3 = Color3.fromRGB(0, 0, 0)
antiban.TextScaled = true
antiban.TextSize = 14.000
antiban.TextWrapped = true

wall.Name = "wall"
wall.Parent = Frame
wall.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
wall.BorderColor3 = Color3.fromRGB(144, 47, 139)
wall.Position = UDim2.new(0.0327888206, 0, 0.51555264, 0)
wall.Size = UDim2.new(0, 94, 0, 31)
wall.ZIndex = 1000000000
wall.Font = Enum.Font.GothamBlack
wall.Text = "Autowall"
wall.TextColor3 = Color3.fromRGB(0, 0, 0)
wall.TextScaled = true
wall.TextSize = 14.000
wall.TextWrapped = true

autocamp.Name = "autocamp"
autocamp.Parent = Frame
autocamp.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
autocamp.BorderColor3 = Color3.fromRGB(144, 47, 139)
autocamp.Position = UDim2.new(0.200140476, 0, 0.512962222, 0)
autocamp.Size = UDim2.new(0, 94, 0, 31)
autocamp.ZIndex = 1000000000
autocamp.Font = Enum.Font.GothamBlack
autocamp.Text = "AutoCampfire"
autocamp.TextColor3 = Color3.fromRGB(0, 0, 0)
autocamp.TextScaled = true
autocamp.TextSize = 14.000
autocamp.TextWrapped = true

tpspamus.Name = "tpspamus"
tpspamus.Parent = Frame
tpspamus.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
tpspamus.BorderColor3 = Color3.fromRGB(255, 255, 255)
tpspamus.Position = UDim2.new(0.372021377, 0, 0.0430000015, 0)
tpspamus.Size = UDim2.new(0, 94, 0, 30)
tpspamus.ZIndex = 1000000000
tpspamus.Font = Enum.Font.GothamBlack
tpspamus.PlaceholderColor3 = Color3.fromRGB(0, 0, 0)
tpspamus.PlaceholderText = "Username"
tpspamus.Text = ""
tpspamus.TextColor3 = Color3.fromRGB(0, 0, 0)
tpspamus.TextScaled = true
tpspamus.TextSize = 15.000
tpspamus.TextWrapped = true

dropitemos.Name = "dropitemos"
dropitemos.Parent = Frame
dropitemos.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
dropitemos.BorderColor3 = Color3.fromRGB(99, 32, 96)
dropitemos.Position = UDim2.new(0.710820258, 0, 0.176763773, 0)
dropitemos.Size = UDim2.new(0, 94, 0, 31)
dropitemos.ZIndex = 1000000000
dropitemos.Font = Enum.Font.GothamBlack
dropitemos.Text = "QUICK DROP"
dropitemos.TextColor3 = Color3.fromRGB(0, 0, 0)
dropitemos.TextScaled = true
dropitemos.TextSize = 14.000
dropitemos.TextWrapped = true

tpspam.Name = "tpspam"
tpspam.Parent = Frame
tpspam.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
tpspam.BorderColor3 = Color3.fromRGB(99, 32, 96)
tpspam.Position = UDim2.new(0.371655315, 0, 0.176928893, 0)
tpspam.Size = UDim2.new(0, 94, 0, 31)
tpspam.ZIndex = 1000000000
tpspam.Font = Enum.Font.GothamBlack
tpspam.Text = "TPSPAM"
tpspam.TextColor3 = Color3.fromRGB(0, 0, 0)
tpspam.TextScaled = true
tpspam.TextSize = 14.000
tpspam.TextWrapped = true

itemname.Name = "itemname"
itemname.Parent = Frame
itemname.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
itemname.BorderColor3 = Color3.fromRGB(255, 255, 255)
itemname.Position = UDim2.new(0.799091756, 0, 0.0404297113, 0)
itemname.Size = UDim2.new(0, 94, 0, 30)
itemname.ZIndex = 1000000000
itemname.Font = Enum.Font.GothamBlack
itemname.PlaceholderColor3 = Color3.fromRGB(0, 0, 0)
itemname.PlaceholderText = "Item Name"
itemname.Text = ""
itemname.TextColor3 = Color3.fromRGB(0, 0, 0)
itemname.TextScaled = true
itemname.TextSize = 15.000
itemname.TextWrapped = true

itemkeybind.Name = "itemkeybind"
itemkeybind.Parent = Frame
itemkeybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
itemkeybind.BorderColor3 = Color3.fromRGB(255, 255, 255)
itemkeybind.Position = UDim2.new(0.621313989, 0, 0.0404297113, 0)
itemkeybind.Size = UDim2.new(0, 94, 0, 30)
itemkeybind.ZIndex = 1000000000
itemkeybind.Font = Enum.Font.GothamBlack
itemkeybind.PlaceholderColor3 = Color3.fromRGB(0, 0, 0)
itemkeybind.PlaceholderText = "Keybind"
itemkeybind.Text = ""
itemkeybind.TextColor3 = Color3.fromRGB(0, 0, 0)
itemkeybind.TextScaled = true
itemkeybind.TextSize = 15.000
itemkeybind.TextWrapped = true

chest.Name = "chest"
chest.Parent = Frame
chest.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
chest.BorderColor3 = Color3.fromRGB(144, 47, 139)
chest.Position = UDim2.new(0.199295148, 0, 0.670456111, 0)
chest.Size = UDim2.new(0, 94, 0, 31)
chest.ZIndex = 1000000000
chest.Font = Enum.Font.GothamBlack
chest.Text = "Place Chest"
chest.TextColor3 = Color3.fromRGB(0, 0, 0)
chest.TextScaled = true
chest.TextSize = 14.000
chest.TextWrapped = true

ScrollingFrame.Parent = Frame
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
ScrollingFrame.BorderColor3 = Color3.fromRGB(144, 47, 139)
ScrollingFrame.Position = UDim2.new(0.5309273, 0, 0.349447012, 0)
ScrollingFrame.Size = UDim2.new(0, 294, 0, 116)
ScrollingFrame.ZIndex = 1000000000
ScrollingFrame.CanvasPosition = Vector2.new(0, 45.1724052)

goober.Name = "goober"
goober.Parent = ScrollingFrame
goober.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
goober.BorderColor3 = Color3.fromRGB(175, 57, 169)
goober.Position = UDim2.new(0.0238095243, 0, 0.0110940142, 0)
goober.Size = UDim2.new(0, 131, 0, 31)
goober.ZIndex = 1000000000
goober.Font = Enum.Font.GothamBlack
goober.Text = "Goober Bag"
goober.TextColor3 = Color3.fromRGB(0, 0, 0)
goober.TextScaled = true
goober.TextSize = 14.000
goober.TextWrapped = true

magm.Name = "magm"
magm.Parent = ScrollingFrame
magm.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
magm.BorderColor3 = Color3.fromRGB(175, 57, 169)
magm.Position = UDim2.new(0.503401399, 0, 0.0110940142, 0)
magm.Size = UDim2.new(0, 131, 0, 31)
magm.ZIndex = 1000000000
magm.Font = Enum.Font.GothamBlack
magm.Text = "Magnetite Mask"
magm.TextColor3 = Color3.fromRGB(0, 0, 0)
magm.TextScaled = true
magm.TextSize = 14.000
magm.TextWrapped = true

magg.Name = "magg"
magg.Parent = ScrollingFrame
magg.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
magg.BorderColor3 = Color3.fromRGB(175, 57, 169)
magg.Position = UDim2.new(0.503401399, 0, 0.0698516294, 0)
magg.Size = UDim2.new(0, 131, 0, 31)
magg.ZIndex = 1000000000
magg.Font = Enum.Font.GothamBlack
magg.Text = "Magnetite Greaves"
magg.TextColor3 = Color3.fromRGB(0, 0, 0)
magg.TextScaled = true
magg.TextSize = 14.000
magg.TextWrapped = true

magc.Name = "magc"
magc.Parent = ScrollingFrame
magc.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
magc.BorderColor3 = Color3.fromRGB(175, 57, 169)
magc.Position = UDim2.new(0.0238095243, 0, 0.0698516294, 0)
magc.Size = UDim2.new(0, 131, 0, 31)
magc.ZIndex = 1000000000
magc.Font = Enum.Font.GothamBlack
magc.Text = "Magnetite Chestplate"
magc.TextColor3 = Color3.fromRGB(0, 0, 0)
magc.TextScaled = true
magc.TextSize = 14.000
magc.TextWrapped = true

peep.Name = "peep"
peep.Parent = ScrollingFrame
peep.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
peep.BorderColor3 = Color3.fromRGB(175, 57, 169)
peep.Position = UDim2.new(0.503000021, 0, 0.129999995, 0)
peep.Size = UDim2.new(0, 131, 0, 31)
peep.ZIndex = 1000000000
peep.Font = Enum.Font.GothamBlack
peep.Text = "Peeper Popsicle"
peep.TextColor3 = Color3.fromRGB(0, 0, 0)
peep.TextScaled = true
peep.TextSize = 14.000
peep.TextWrapped = true

rad.Name = "rad"
rad.Parent = ScrollingFrame
rad.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
rad.BorderColor3 = Color3.fromRGB(175, 57, 169)
rad.Position = UDim2.new(0.0240000002, 0, 0.129999995, 0)
rad.Size = UDim2.new(0, 131, 0, 31)
rad.ZIndex = 1000000000
rad.Font = Enum.Font.GothamBlack
rad.Text = "Radio Pack"
rad.TextColor3 = Color3.fromRGB(0, 0, 0)
rad.TextScaled = true
rad.TextSize = 14.000
rad.TextWrapped = true

magb.Name = "magb"
magb.Parent = ScrollingFrame
magb.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
magb.BorderColor3 = Color3.fromRGB(175, 57, 169)
magb.Position = UDim2.new(0.0240000002, 0, 0.188421041, 0)
magb.Size = UDim2.new(0, 131, 0, 31)
magb.ZIndex = 1000000000
magb.Font = Enum.Font.GothamBlack
magb.Text = "Magnetite Bar"
magb.TextColor3 = Color3.fromRGB(0, 0, 0)
magb.TextScaled = true
magb.TextSize = 14.000
magb.TextWrapped = true

spirkey.Name = "spirkey"
spirkey.Parent = ScrollingFrame
spirkey.BackgroundColor3 = Color3.fromRGB(175, 57, 169)
spirkey.BorderColor3 = Color3.fromRGB(175, 57, 169)
spirkey.Position = UDim2.new(0.503401399, 0, 0.187819779, 0)
spirkey.Size = UDim2.new(0, 131, 0, 31)
spirkey.ZIndex = 1000000000
spirkey.Font = Enum.Font.GothamBlack
spirkey.Text = "Spirit Key"
spirkey.TextColor3 = Color3.fromRGB(0, 0, 0)
spirkey.TextScaled = true
spirkey.TextSize = 14.000
spirkey.TextWrapped = true

TextLabel_3.Parent = Frame
TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.BackgroundTransparency = 1.000
TextLabel_3.Position = UDim2.new(0.606999993, 0, 0.298999995, 0)
TextLabel_3.Size = UDim2.new(0, 193, 0, 15)
TextLabel_3.ZIndex = 1000000000
TextLabel_3.Font = Enum.Font.GothamBlack
TextLabel_3.Text = "DUPING SECTION"
TextLabel_3.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_3.TextScaled = true
TextLabel_3.TextSize = 14.000
TextLabel_3.TextWrapped = true

rain.Name = "rain"
rain.Parent = Frame
rain.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
rain.BorderColor3 = Color3.fromRGB(144, 47, 139)
rain.Position = UDim2.new(0.371655405, 0, 0.670456111, 0)
rain.Size = UDim2.new(0, 94, 0, 31)
rain.ZIndex = 1000000000
rain.Font = Enum.Font.GothamBlack
rain.Text = "Remove Rain"
rain.TextColor3 = Color3.fromRGB(0, 0, 0)
rain.TextScaled = true
rain.TextSize = 14.000
rain.TextWrapped = true

TextLabel_4.Parent = Frame
TextLabel_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.BackgroundTransparency = 1.000
TextLabel_4.Position = UDim2.new(0.177018628, 0, 0.898026347, 0)
TextLabel_4.Size = UDim2.new(0, 200, 0, 19)
TextLabel_4.ZIndex = 1000000000
TextLabel_4.Font = Enum.Font.SourceSans
TextLabel_4.Text = "Big Thanks To bobm321123#2152 and Hush#5658 for testing and giving me ideas."
TextLabel_4.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_4.TextSize = 14.000

TextLabel_5.Parent = Frame
TextLabel_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.BackgroundTransparency = 1.000
TextLabel_5.Position = UDim2.new(0.177018628, 0, 0.9375, 0)
TextLabel_5.Size = UDim2.new(0, 200, 0, 19)
TextLabel_5.ZIndex = 1000000000
TextLabel_5.Font = Enum.Font.SourceSans
TextLabel_5.Text = "But Bigger Thanks To Me (Sub-Cent#5213) For Making This Script"
TextLabel_5.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_5.TextSize = 14.000

TextLabel_6.Parent = Frame
TextLabel_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.BackgroundTransparency = 1.000
TextLabel_6.Position = UDim2.new(0.755291998, 0, -0.0925751925, 0)
TextLabel_6.Size = UDim2.new(0, 122, 0, 28)
TextLabel_6.ZIndex = 1000000000
TextLabel_6.Font = Enum.Font.GothamBlack
TextLabel_6.Text = "THE BEST CHOICE"
TextLabel_6.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_6.TextSize = 14.000

frname.Name = "frname"
frname.Parent = Frame
frname.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frname.BorderColor3 = Color3.fromRGB(255, 255, 255)
frname.Position = UDim2.new(0.682632148, 0, 0.764113903, 0)
frname.Size = UDim2.new(0, 94, 0, 30)
frname.ZIndex = 1000000000
frname.Font = Enum.Font.GothamBlack
frname.PlaceholderColor3 = Color3.fromRGB(0, 0, 0)
frname.PlaceholderText = "Fruit Name"
frname.Text = ""
frname.TextColor3 = Color3.fromRGB(0, 0, 0)
frname.TextScaled = true
frname.TextSize = 15.000
frname.TextWrapped = true

plant.Name = "plant"
plant.Parent = Frame
plant.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
plant.BorderColor3 = Color3.fromRGB(99, 32, 96)
plant.Position = UDim2.new(0.682869971, 0, 0.877421677, 0)
plant.Size = UDim2.new(0, 94, 0, 31)
plant.ZIndex = 1000000000
plant.Font = Enum.Font.GothamBlack
plant.Text = "PLANT"
plant.TextColor3 = Color3.fromRGB(0, 0, 0)
plant.TextScaled = true
plant.TextSize = 14.000
plant.TextWrapped = true

ah.Name = "ah"
ah.Parent = ScreenGui
ah.BackgroundColor3 = Color3.fromRGB(144, 47, 139)
ah.BorderColor3 = Color3.fromRGB(99, 32, 96)
ah.Position = UDim2.new(0.445554465, 0, -0.000210762024, 0)
ah.Size = UDim2.new(0, 208, 0, 30)
ah.Visible = false
ah.ZIndex = 1000000000

TextLabel_7.Parent = ah
TextLabel_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_7.BackgroundTransparency = 1.000
TextLabel_7.Position = UDim2.new(0.014423077, 0, -0.333333343, 0)
TextLabel_7.Size = UDim2.new(0, 200, 0, 50)
TextLabel_7.ZIndex = 1000000000
TextLabel_7.Font = Enum.Font.SourceSans
TextLabel_7.Text = "Anti-Ban v.01"
TextLabel_7.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_7.TextScaled = true
TextLabel_7.TextSize = 14.000
TextLabel_7.TextWrapped = true

-- Scripts:

local function QBZQS_fake_script() -- TextButton.LocalScript 
	local script = Instance.new('LocalScript', TextButton)

	local frame = script.Parent.Parent.h
	local open = false
	
	script.Parent.MouseButton1Click:Connect(function()
		if frame.Visible == false then
			frame.Visible = true
		end
	end)
	
end
coroutine.wrap(QBZQS_fake_script)()
local function UARZOX_fake_script() -- TextButton_2.LocalScript 
	local script = Instance.new('LocalScript', TextButton_2)

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Visible = false
	end)
end
coroutine.wrap(UARZOX_fake_script)()
local function SYSUT_fake_script() -- esp.LocalScript 
	local script = Instance.new('LocalScript', esp)

	script.Parent.MouseButton1Click:Connect(function()
		assert(Drawing, 'exploit not supported')
	
		if not syn and not PROTOSMASHER_LOADED then print'Unnamed ESP only officially supports Synapse and Protosmasher! If you\'re an exploit developer and have added drawing API to your exploit, try setting syn as true then checking if that works, otherwise, DM me on discord @ cppbook.org#1968 or add an issue to the Unnamed ESP Github Repository and I\'ll see it through email!' end
	
		local UserInputService	= game:GetService'UserInputService';
		local HttpService		= game:GetService'HttpService';
		local GUIService		= game:GetService'GuiService';
		local TweenService		= game:GetService'TweenService';
		local RunService		= game:GetService'RunService';
		local Players			= game:GetService'Players';
		local LocalPlayer		= Players.LocalPlayer;
		local Camera			= workspace.CurrentCamera;
		local Mouse				= LocalPlayer:GetMouse();
		local V2New				= Vector2.new;
		local V3New				= Vector3.new;
		local WTVP				= Camera.WorldToViewportPoint;
		local WorldToViewport	= function(...) return WTVP(Camera, ...) end;
		local Menu				= {};
		local MouseHeld			= false;
		local LastRefresh		= 0;
		local OptionsFile		= 'IC3_ESP_SETTINGS.dat';
		local Binding			= false;
		local BindedKey			= nil;
		local OIndex			= 0;
		local LineBox			= {};
		local UIButtons			= {};
		local Sliders			= {};
		local ColorPicker		= { Loading = false; LastGenerated = 0 };
		local Dragging			= false;
		local DraggingUI		= false;
		local Rainbow			= false;
		local DragOffset		= V2New();
		local DraggingWhat		= nil;
		local OldData			= {};
		local IgnoreList		= {};
		local EnemyColor		= Color3.new(1, 0, 0);
		local TeamColor			= Color3.new(0, 1, 0);
		local MenuLoaded		= false;
		local ErrorLogging		= false;
		local TracerPosition	= V2New(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y - 135);
		local DragTracerPosition= false;
		local SubMenu 			= {};
		local IsSynapse 		= syn and not PROTOSMASHER_LOADED;
		local Connections 		= { Active = {} };
		local Signal 			= {}; Signal.__index = Signal;
		local GetCharacter;
		local CurrentColorPicker;
		local Spectating;
	
		-- if not PROTOSMASHER_LOADED then Drawing.UseCompatTransparency = true; end -- For Elysian
	
		shared.MenuDrawingData	= shared.MenuDrawingData or { Instances = {} };
		shared.InstanceData		= shared.InstanceData or {};
		shared.RSName			= shared.RSName or ('UnnamedESP_by_ic3-' .. HttpService:GenerateGUID(false));
	
		local GetDataName		= shared.RSName .. '-GetData';
		local UpdateName		= shared.RSName .. '-Update';
	
		local Debounce			= setmetatable({}, {
			__index = function(t, i)
				return rawget(t, i) or false
			end;
		});
	
		if shared.UESP_InputChangedCon then shared.UESP_InputChangedCon:Disconnect() end
		if shared.UESP_InputBeganCon then shared.UESP_InputBeganCon:Disconnect() end
		if shared.UESP_InputEndedCon then shared.UESP_InputEndedCon:Disconnect() end
		if shared.CurrentColorPicker then shared.CurrentColorPicker:Dispose() end
	
		local RealPrint, LastPrintTick = print, 0;
		local LatestPrints = setmetatable({}, { __index = function(t, i) return rawget(t, i) or 0 end });
	
		local function print(...)
			local Content = unpack{...};
			local print = RealPrint;
	
			if tick() - LatestPrints[Content] > 5 then
				LatestPrints[Content] = tick();
				print(Content);
			end
		end
	
		local function FromHex(HEX)
			HEX = HEX:gsub('#', '');
	
			return Color3.fromRGB(tonumber('0x' .. HEX:sub(1, 2)), tonumber('0x' .. HEX:sub(3, 4)), tonumber('0x' .. HEX:sub(5, 6)));
		end
	
		local function IsStringEmpty(String)
			if type(String) == 'string' then
				return String:match'^%s+$' ~= nil or #String == 0 or String == '' or false;
			end
	
			return false;
		end
	
		local function Set(t, i, v)
			t[i] = v;
		end
	
		local Teams = {};
		local CustomTeams = { -- Games that don't use roblox's team system
			[2563455047] = {
				Initialize = function()
					Teams.Sheriffs = {}; -- prevent big error
					Teams.Bandits = {}; -- prevent big error
					local Func = game:GetService'ReplicatedStorage':WaitForChild('RogueFunc', 1);
					local Event = game:GetService'ReplicatedStorage':WaitForChild('RogueEvent', 1);
					local S, B = Func:InvokeServer'AllTeamData';
	
					Teams.Sheriffs = S;
					Teams.Bandits = B;
	
					Event.OnClientEvent:Connect(function(id, PlayerName, Team, Remove) -- stolen straight from decompiled src lul
						if id == 'UpdateTeam' then
							local TeamTable, NotTeamTable
							if Team == 'Bandits' then
								TeamTable = TDM.Bandits
								NotTeamTable = TDM.Sheriffs
							else
								TeamTable = TDM.Sheriffs
								NotTeamTable = TDM.Bandits
							end
							if Remove then
								TeamTable[PlayerName] = nil
							else
								TeamTable[PlayerName] = true
								NotTeamTable[PlayerName] = nil
							end
							if PlayerName == LocalPlayer.Name then
								TDM.Friendlys = TeamTable
								TDM.Enemies = NotTeamTable
							end
						end
					end)
				end;
				CheckTeam = function(Player)
					local LocalTeam = Teams.Sheriffs[LocalPlayer.Name] and Teams.Sheriffs or Teams.Bandits;
	
					return LocalTeam[Player.Name] and true or false;
				end;
			};
			[5208655184] = {
				CheckTeam = function(Player)
					local LocalLastName = LocalPlayer:GetAttribute'LastName' if not LocalLastName or IsStringEmpty(LocalLastName) then return true end
					local PlayerLastName = Player:GetAttribute'LastName' if not PlayerLastName then return false end
	
					return PlayerLastName == LocalLastName
				end
			};
			[3541987450] = {
				CheckTeam = function(Player)
					local LocalStats = LocalPlayer:FindFirstChild'leaderstats';
					local LocalLastName = LocalStats and LocalStats:FindFirstChild'LastName'; if not LocalLastName or IsStringEmpty(LocalLastName.Value) then return true; end
					local PlayerStats = Player:FindFirstChild'leaderstats';
					local PlayerLastName = PlayerStats and PlayerStats:FindFirstChild'LastName'; if not PlayerLastName then return false; end
	
					return PlayerLastName.Value == LocalLastName.Value;
				end;
			};
		};
	
		local RenderList = {Instances = {}};
	
		function RenderList:AddOrUpdateInstance(Instance, Obj2Draw, Text, Color)
			RenderList.Instances[Instance] = { ParentInstance = Instance; Instance = Obj2Draw; Text = Text; Color = Color };
			return RenderList.Instances[Instance];
		end
	
		local CustomPlayerTag;
		local CustomESP;
		local CustomCharacter;
	
		local Modules = {
			[292439477] = {
				CustomESP = function()
					if not shared.PF_Replication then
						for i, v in pairs(getgc(true)) do
							if typeof(v) == 'table' and rawget(v, 'getbodyparts') then
								shared.PF_Replication = v;
								break;
							end
						end
					else
						for Index, Player in pairs(Players:GetPlayers()) do
							if Player == LocalPlayer then continue end
	
							local Body = shared.PF_Replication.getbodyparts(Player);
	
							if Body and typeof(Body) == 'table' and rawget(Body, 'rootpart') then
								Player.Character = Body.rootpart.Parent;
							else
								Player.Character = nil;
							end
						end
					end
				end
			};
			[2950983942] = {
				CustomCharacter = function(Player)
					if workspace:FindFirstChild'Players' then
						return workspace.Players:FindFirstChild(Player.Name);
					end
				end
			};
			[2262441883] = {
				CustomPlayerTag = function(Player)
					return Player:FindFirstChild'Job' and (' [' .. Player.Job.Value .. ']') or '';
				end;
				CustomESP = function()
					if workspace:FindFirstChild'MoneyPrinters' then
						for i, v in pairs(workspace.MoneyPrinters:GetChildren()) do
							local Main	= v:FindFirstChild'Main';
							local Owner	= v:FindFirstChild'TrueOwner';
							local Money	= v:FindFirstChild'Int' and v.Int:FindFirstChild'Money' or nil;
							if Main and Owner and Money then
								local O = tostring(Owner.Value);
								local M = tostring(Money.Value);
	
								pcall(RenderList.AddOrUpdateInstance, RenderList, v, Main, string.format('Money Printer\nOwned by %s\n[%s]', O, M), Color3.fromRGB(13, 255, 227));
							end
						end
					end
				end;
			};
			-- [4581966615] = {
			-- 	CustomESP = function()
			-- 		if workspace:FindFirstChild'Entities' then
			-- 			for i, v in pairs(workspace.Entities:GetChildren()) do
			-- 				if not v.Name:match'Printer' then continue end
	
			-- 				local Properties = v:FindFirstChild'Properties' if not Properties then continue end
			-- 				local Main	= v:FindFirstChild'hitbox';
			-- 				local Owner	= Properties:FindFirstChild'Owner';
			-- 				local Money	= Properties:FindFirstChild'CurrentPrinted'
	
			-- 				if Main and Owner and Money then
			-- 					local O = Owner.Value and tostring(Owner.Value) or 'no one';
			-- 					local M = tostring(Money.Value);
	
			-- 					pcall(RenderList.AddOrUpdateInstance, RenderList, v, Main, string.format('Money Printer\nOwned by %s\n[%s]', O, M), Color3.fromRGB(13, 255, 227));
			-- 				end
			-- 			end
			-- 		end
			-- 	end;
			-- };
			[4801598506] = {
				CustomESP = function()
					if workspace:FindFirstChild'Mobs' and workspace.Mobs:FindFirstChild'Forest1' then
						for i, v in pairs(workspace.Mobs.Forest1:GetChildren()) do
							local Main	= v:FindFirstChild'Head';
							local Hum	= v:FindFirstChild'Mob';
	
							if Main and Hum then
								pcall(RenderList.AddOrUpdateInstance, RenderList, v, Main, string.format('[%s] [%s/%s]', v.Name, Hum.Health, Hum.MaxHealth), Color3.fromRGB(13, 255, 227));
							end
						end
					end
				end;
			};
			[2555873122] = {
				CustomESP = function()
					if workspace:FindFirstChild'WoodPlanks' then
						for i, v in pairs(workspace:GetChildren()) do
							if v.Name == 'WoodPlanks' then
								local Main = v:FindFirstChild'Wood';
	
								if Main then
									pcall(RenderList.AddOrUpdateInstance, RenderList, v, Main, 'Wood Planks', Color3.fromRGB(13, 255, 227));
								end
							end
						end
					end
				end;
			};
			[5208655184] = {
				CustomESP = function()
					-- if workspace:FindFirstChild'Live' then
					-- 	for i, v in pairs(workspace.Live:GetChildren()) do
					-- 		if v.Name:sub(1, 1) == '.' then
					-- 			local Main = v:FindFirstChild'Head';
	
					-- 			if Main then
					-- 				pcall(RenderList.AddOrUpdateInstance, RenderList, v, Main, v.Name:sub(2), Color3.fromRGB(250, 50, 40));
					-- 			end
					-- 		end
					-- 	end
					-- end
				end;
				CustomPlayerTag = function(Player)
					if game.PlaceVersion < 457 then return '' end
	
					local Name = '';
					local FirstName = Player:GetAttribute'FirstName'
	
					if typeof(FirstName) == 'string' and #FirstName > 0 then
						local Prefix = '';
						local Extra = {};
						Name = Name .. '\n[';
	
						if Player:GetAttribute'Prestige' > 0 then
							Name = Name .. '#' .. tostring(Player:GetAttribute'Prestige') .. ' ';
						end
						if not IsStringEmpty(Player:GetAttribute'HouseRank') then
							Prefix = Player:GetAttribute'HouseRank' == 'Owner' and (Player:GetAttribute'Gender' == 'Female' and 'Lady ' or 'Lord ') or '';
						end
						if not IsStringEmpty(FirstName) then
							Name = Name .. '' .. Prefix .. FirstName;
						end
						if not IsStringEmpty(Player:GetAttribute'LastName') then
							Name = Name .. ' ' .. Player:GetAttribute'LastName';
						end
	
						if not IsStringEmpty(Name) then Name = Name .. ']'; end
	
						local Character = GetCharacter(Player);
	
						if Character then
							if Character and Character:FindFirstChild'Danger' then table.insert(Extra, 'D'); end
							if Character:FindFirstChild'ManaAbilities' and Character.ManaAbilities:FindFirstChild'ManaSprint' then table.insert(Extra, 'D1'); end
	
							if Character:FindFirstChild'Mana'	 		then table.insert(Extra, 'M' .. math.floor(Character.Mana.Value)); end
							if Character:FindFirstChild'Vampirism' 		then table.insert(Extra, 'V'); end
							if Character:FindFirstChild'Observe'		then table.insert(Extra, 'ILL'); end
							if Character:FindFirstChild'Inferi'			then table.insert(Extra, 'NEC'); end
							if Character:FindFirstChild'World\'s Pulse' then table.insert(Extra, 'DZIN'); end
							if Character:FindFirstChild'Shift'		 	then table.insert(Extra, 'MAD'); end
							if Character:FindFirstChild'Head' and Character.Head:FindFirstChild'FacialMarking' then
								local FM = Character.Head:FindFirstChild'FacialMarking';
								if FM.Texture == 'http://www.roblox.com/asset/?id=4072968006' then
									table.insert(Extra, 'HEALER');
								elseif FM.Texture == 'http://www.roblox.com/asset/?id=4072914434' then
									table.insert(Extra, 'SEER');
								elseif FM.Texture == 'http://www.roblox.com/asset/?id=4094417635' then
									table.insert(Extra, 'JESTER');
								elseif FM.Texture == 'http://www.roblox.com/asset/?id=4072968656' then
									table.insert(Extra, 'BLADE');
								end
							end
						end
						if Player:FindFirstChild'Backpack' then
							if Player.Backpack:FindFirstChild'Observe' 			then table.insert(Extra, 'ILL');  end
							if Player.Backpack:FindFirstChild'Inferi'			then table.insert(Extra, 'NEC');  end
							if Player.Backpack:FindFirstChild'World\'s Pulse' 	then table.insert(Extra, 'DZIN'); end
							if Player.Backpack:FindFirstChild'Shift'		 	then table.insert(Extra, 'MAD'); end
						end
	
						if #Extra > 0 then Name = Name .. ' [' .. table.concat(Extra, '-') .. ']'; end
					end
	
					return Name;
				end;
			};
			[3541987450] = {
				CustomPlayerTag = function(Player)
					local Name = '';
	
					if Player:FindFirstChild'leaderstats' then
						Name = Name .. '\n[';
						local Prefix = '';
						local Extra = {};
						if Player.leaderstats:FindFirstChild'Prestige' and Player.leaderstats.Prestige.ClassName == 'IntValue' and Player.leaderstats.Prestige.Value > 0 then
							Name = Name .. '#' .. tostring(Player.leaderstats.Prestige.Value) .. ' ';
						end
						if Player.leaderstats:FindFirstChild'HouseRank' and Player.leaderstats:FindFirstChild'Gender' and Player.leaderstats.HouseRank.ClassName == 'StringValue' and not IsStringEmpty(Player.leaderstats.HouseRank.Value) then
							Prefix = Player.leaderstats.HouseRank.Value == 'Owner' and (Player.leaderstats.Gender.Value == 'Female' and 'Lady ' or 'Lord ') or '';
						end
						if Player.leaderstats:FindFirstChild'FirstName' and Player.leaderstats.FirstName.ClassName == 'StringValue' and not IsStringEmpty(Player.leaderstats.FirstName.Value) then
							Name = Name .. '' .. Prefix .. Player.leaderstats.FirstName.Value;
						end
						if Player.leaderstats:FindFirstChild'LastName' and Player.leaderstats.LastName.ClassName == 'StringValue' and not IsStringEmpty(Player.leaderstats.LastName.Value) then
							Name = Name .. ' ' .. Player.leaderstats.LastName.Value;
						end
						if Player.leaderstats:FindFirstChild'UberTitle' and Player.leaderstats.UberTitle.ClassName == 'StringValue' and not IsStringEmpty(Player.leaderstats.UberTitle.Value) then
							Name = Name .. ', ' .. Player.leaderstats.UberTitle.Value;
						end
	
						if not IsStringEmpty(Name) then Name = Name .. ']'; end
	
						local Character = GetCharacter(Player);
	
						if Character then
							if Character and Character:FindFirstChild'Danger' then table.insert(Extra, 'D'); end
							if Character:FindFirstChild'ManaAbilities' and Character.ManaAbilities:FindFirstChild'ManaSprint' then table.insert(Extra, 'D1'); end
	
							if Character:FindFirstChild'Mana'	 		then table.insert(Extra, 'M' .. math.floor(Character.Mana.Value)); end
							if Character:FindFirstChild'Vampirism' 		then table.insert(Extra, 'V');    end
							if Character:FindFirstChild'Observe'			then table.insert(Extra, 'ILL');  end
							if Character:FindFirstChild'Inferi'			then table.insert(Extra, 'NEC');  end
	
							if Character:FindFirstChild'World\'s Pulse' 	then table.insert(Extra, 'DZIN'); end
							if Character:FindFirstChild'Head' and Character.Head:FindFirstChild'FacialMarking' then
								local FM = Character.Head:FindFirstChild'FacialMarking';
								if FM.Texture == 'http://www.roblox.com/asset/?id=4072968006' then
									table.insert(Extra, 'HEALER');
								elseif FM.Texture == 'http://www.roblox.com/asset/?id=4072914434' then
									table.insert(Extra, 'SEER');
								elseif FM.Texture == 'http://www.roblox.com/asset/?id=4094417635' then
									table.insert(Extra, 'JESTER');
								end
							end
						end
						if Player:FindFirstChild'Backpack' then
							if Player.Backpack:FindFirstChild'Observe' 			then table.insert(Extra, 'ILL');  end
							if Player.Backpack:FindFirstChild'Inferi'			then table.insert(Extra, 'NEC');  end
							if Player.Backpack:FindFirstChild'World\'s Pulse' 	then table.insert(Extra, 'DZIN'); end
						end
	
						if #Extra > 0 then Name = Name .. ' [' .. table.concat(Extra, '-') .. ']'; end
					end
	
					return Name;
				end;
			};
			[4691401390] = { -- Vast Realm
				CustomCharacter = function(Player)
					if workspace:FindFirstChild'Players' then
						return workspace.Players:FindFirstChild(Player.Name);
					end
				end
			};
		};
	
		if Modules[game.PlaceId] ~= nil then
			local Module = Modules[game.PlaceId];
			CustomPlayerTag = Module.CustomPlayerTag or nil;
			CustomESP = Module.CustomESP or nil;
			CustomCharacter = Module.CustomCharacter or nil;
		end
	
		function GetCharacter(Player)
			return Player.Character or (CustomCharacter and CustomCharacter(Player));
		end
	
		function GetMouseLocation()
			return UserInputService:GetMouseLocation();
		end
	
		function MouseHoveringOver(Values)
			local X1, Y1, X2, Y2 = Values[1], Values[2], Values[3], Values[4]
			local MLocation = GetMouseLocation();
			return (MLocation.x >= X1 and MLocation.x <= (X1 + (X2 - X1))) and (MLocation.y >= Y1 and MLocation.y <= (Y1 + (Y2 - Y1)));
		end
	
		function GetTableData(t) -- basically table.foreach i dont even know why i made this
			if typeof(t) ~= 'table' then return end
	
			return setmetatable(t, {
				__call = function(t, func)
					if typeof(func) ~= 'function' then return end;
					for i, v in pairs(t) do
						pcall(func, i, v);
					end
				end;
			});
		end
		local function Format(format, ...)
			return string.format(format, ...);
		end
		function CalculateValue(Min, Max, Percent)
			return Min + math.floor(((Max - Min) * Percent) + .5);
		end
	
		function NewDrawing(InstanceName)
			local Instance = Drawing.new(InstanceName);
			-- pcall(Set, Instance, 'OutlineOpacity', 0.8)
			return (function(Properties)
				for i, v in pairs(Properties) do
					pcall(Set, Instance, i, v);
				end
				return Instance;
			end)
		end
	
		function Menu:AddMenuInstance(Name, DrawingType, Properties)
			local Instance;
	
			if shared.MenuDrawingData.Instances[Name] ~= nil then
				Instance = shared.MenuDrawingData.Instances[Name];
				for i, v in pairs(Properties) do
					pcall(Set, Instance, i, v);
				end
			else
				Instance = NewDrawing(DrawingType)(Properties);
			end
	
			shared.MenuDrawingData.Instances[Name] = Instance;
	
			return Instance;
		end
		function Menu:UpdateMenuInstance(Name)
			local Instance = shared.MenuDrawingData.Instances[Name];
			if Instance ~= nil then
				return (function(Properties)
					for i, v in pairs(Properties) do
						pcall(Set, Instance, i, v);
					end
					return Instance;
				end)
			end
		end
		function Menu:GetInstance(Name)
			return shared.MenuDrawingData.Instances[Name];
		end
	
		local Options = setmetatable({}, {
			__call = function(t, ...)
				local Arguments = {...};
				local Name = Arguments[1];
				OIndex = OIndex + 1;
				rawset(t, Name, setmetatable({
					Name			= Arguments[1];
					Text			= Arguments[2];
					Value			= Arguments[3];
					DefaultValue	= Arguments[3];
					AllArgs			= Arguments;
					Index			= OIndex;
				}, {
					__call = function(t, v, force)
						local self = t;
	
						if typeof(t.Value) == 'function' then
							t.Value();
						elseif typeof(t.Value) == 'EnumItem' then
							local BT = Menu:GetInstance(Format('%s_BindText', t.Name));
							if not force then
								Binding = true;
								local Val = 0
								while Binding do
									wait();
									Val = (Val + 1) % 17;
									BT.Text = Val <= 8 and '|' or '';
								end
							end
							t.Value = force and v or BindedKey;
							if BT and t.BasePosition and t.BaseSize then
								BT.Text = tostring(t.Value):match'%w+%.%w+%.(.+)';
								BT.Position = t.BasePosition + V2New(t.BaseSize.X - BT.TextBounds.X - 20, -10);
							end
						else
							local NewValue = v;
							if NewValue == nil then NewValue = not t.Value; end
							rawset(t, 'Value', NewValue);
	
							if Arguments[2] ~= nil and Menu:GetInstance'TopBar'.Visible then
								if typeof(Arguments[3]) == 'number' then
									local AMT = Menu:GetInstance(Format('%s_AmountText', t.Name));
									if AMT then
										AMT.Text = tostring(t.Value);
									end
								else
									local Inner = Menu:GetInstance(Format('%s_InnerCircle', t.Name));
									if Inner then Inner.Visible = t.Value; end
								end
							end
						end
					end;
				}));
			end;
		})
	
		function Load()
			local _, Result = pcall(readfile, OptionsFile);
	
			if _ then -- extremely ugly code yea i know but i dont care p.s. i hate pcall
				local _, Table = pcall(HttpService.JSONDecode, HttpService, Result);
				if _ and typeof(Table) == 'table' then
					for i, v in pairs(Table) do
						if typeof(Options[i]) == 'table' and Options[i].Value ~= nil and (typeof(Options[i].Value) == 'boolean' or typeof(Options[i].Value) == 'number') then
							Options[i].Value = v.Value;
							pcall(Options[i], v.Value);
						end
					end
	
					if Table.TeamColor then TeamColor = Color3.new(Table.TeamColor.R, Table.TeamColor.G, Table.TeamColor.B) end
					if Table.EnemyColor then EnemyColor = Color3.new(Table.EnemyColor.R, Table.EnemyColor.G, Table.EnemyColor.B) end
	
					if typeof(Table.MenuKey) == 'string' then Options.MenuKey(Enum.KeyCode[Table.MenuKey], true) end
					if typeof(Table.ToggleKey) == 'string' then Options.ToggleKey(Enum.KeyCode[Table.ToggleKey], true) end
				end
			end
		end
	
		Options('Enabled', 'ESP Enabled', true);
		Options('ShowTeam', 'Show Team', true);
		Options('ShowTeamColor', 'Show Team Color', false);
		Options('ShowName', 'Show Names', true);
		Options('ShowDistance', 'Show Distance', true);
		Options('ShowHealth', 'Show Health', true);
		Options('ShowBoxes', 'Show Boxes', true);
		Options('ShowTracers', 'Show Tracers', true);
		Options('ShowDot', 'Show Head Dot', false);
		Options('VisCheck', 'Visibility Check', false);
		Options('Crosshair', 'Crosshair', false);
		Options('TextOutline', 'Text Outline', true);
		-- Options('Rainbow', 'Rainbow Mode', false);
		Options('TextSize', 'Text Size', syn and 18 or 14, 10, 24); -- cuz synapse fonts look weird???
		Options('MaxDistance', 'Max Distance', 2500, 100, 25000);
		Options('RefreshRate', 'Refresh Rate (ms)', 5, 1, 200);
		Options('YOffset', 'Y Offset', 0, -200, 200);
		Options('MenuKey', 'Menu Key', Enum.KeyCode.F4, 1);
		Options('ToggleKey', 'Toggle Key', Enum.KeyCode.F3, 1);
		Options('ChangeColors', SENTINEL_LOADED and 'Sentinel Unsupported' or 'Change Colors', function()
			if SENTINEL_LOADED then return end
	
			SubMenu:Show(GetMouseLocation(), 'Unnamed Colors', {
				{
					Type = 'Color'; Text = 'Team Color'; Color = TeamColor;
	
					Function = function(Circ, Position)
						if tick() - ColorPicker.LastGenerated < 1 then return; end
	
						if shared.CurrentColorPicker then shared.CurrentColorPicker:Dispose() end
						local ColorPicker = ColorPicker.new(Position - V2New(-10, 50));
						CurrentColorPicker = ColorPicker;
						shared.CurrentColorPicker = CurrentColorPicker;
						ColorPicker.ColorChanged:Connect(function(Color) Circ.Color = Color TeamColor = Color Options.TeamColor = Color end);
					end
				};
				{
					Type = 'Color'; Text = 'Enemy Color'; Color = EnemyColor;
	
					Function = function(Circ, Position)
						if tick() - ColorPicker.LastGenerated < 1 then return; end
	
						if shared.CurrentColorPicker then shared.CurrentColorPicker:Dispose() end
						local ColorPicker = ColorPicker.new(Position - V2New(-10, 50));
						CurrentColorPicker = ColorPicker;
						shared.CurrentColorPicker = CurrentColorPicker;
						ColorPicker.ColorChanged:Connect(function(Color) Circ.Color = Color EnemyColor = Color Options.EnemyColor = Color end);
					end
				};
				{
					Type = 'Button'; Text = 'Reset Colors';
	
					Function = function()
						EnemyColor = Color3.new(1, 0, 0);
						TeamColor = Color3.new(0, 1, 0);
	
						local C1 = Menu:GetInstance'Sub-ColorPreview.1'; if C1 then C1.Color = TeamColor end
						local C2 = Menu:GetInstance'Sub-ColorPreview.2'; if C2 then C2.Color = EnemyColor end
					end
				};
				{
					Type = 'Button'; Text = 'Rainbow Mode';
	
					Function = function()
						Rainbow = not Rainbow;
					end
				};
			});
		end, 2);
		Options('ResetSettings', 'Reset Settings', function()
			for i, v in pairs(Options) do
				if Options[i] ~= nil and Options[i].Value ~= nil and Options[i].Text ~= nil and (typeof(Options[i].Value) == 'boolean' or typeof(Options[i].Value) == 'number' or typeof(Options[i].Value) == 'EnumItem') then
					Options[i](Options[i].DefaultValue, true);
				end
			end
		end, 5);
		Options('LoadSettings', 'Load Settings', Load, 4);
		Options('SaveSettings', 'Save Settings', function()
			local COptions = {};
	
			for i, v in pairs(Options) do
				COptions[i] = v;
			end
	
			if typeof(TeamColor) == 'Color3' then COptions.TeamColor = { R = TeamColor.R; G = TeamColor.G; B = TeamColor.B } end
			if typeof(EnemyColor) == 'Color3' then COptions.EnemyColor = { R = EnemyColor.R; G = EnemyColor.G; B = EnemyColor.B } end
	
			if typeof(COptions.MenuKey.Value) == 'EnumItem' then COptions.MenuKey = COptions.MenuKey.Value.Name end
			if typeof(COptions.ToggleKey.Value) == 'EnumItem' then COptions.ToggleKey = COptions.ToggleKey.Value.Name end
	
			writefile(OptionsFile, HttpService:JSONEncode(COptions));
		end, 3);
	
		Load(1);
	
		Options('MenuOpen', nil, true);
	
		local function Combine(...)
			local Output = {};
			for i, v in pairs{...} do
				if typeof(v) == 'table' then
					table.foreach(v, function(i, v)
						Output[i] = v;
					end)
				end
			end
			return Output
		end
	
		function LineBox:Create(Properties)
			local Box = { Visible = true }; -- prevent errors not really though dont worry bout the Visible = true thing
	
			local Properties = Combine({
				Transparency	= 1;
				Thickness		= 3;
				Visible			= true;
			}, Properties);
	
			if shared.am_ic3 then -- sory just my preference, dynamic boxes will be optional in unnamed esp v2
				Box['OutlineSquare']= NewDrawing'Square'(Properties);
				Box['Square'] 		= NewDrawing'Square'(Properties);
			elseif syn then
				Box['Quad']			= NewDrawing'Quad'(Properties);
			else
				Box['TopLeft']		= NewDrawing'Line'(Properties);
				Box['TopRight']		= NewDrawing'Line'(Properties);
				Box['BottomLeft']	= NewDrawing'Line'(Properties);
				Box['BottomRight']	= NewDrawing'Line'(Properties);
			end
	
			function Box:Update(CF, Size, Color, Properties, Parts)
				if not CF or not Size then return end
	
				if shared.am_ic3 and typeof(Parts) == 'table' then
					local AllCorners = {};
	
					for i, v in pairs(Parts) do
						-- if not v:IsA'BasePart' then continue end
	
						local CF, Size = v.CFrame, v.Size;
						-- CF, Size = v.Parent:GetBoundingBox();
	
						local Corners = {
							Vector3.new(CF.X + Size.X / 2, CF.Y + Size.Y / 2, CF.Z + Size.Z / 2);
							Vector3.new(CF.X - Size.X / 2, CF.Y + Size.Y / 2, CF.Z + Size.Z / 2);
							Vector3.new(CF.X - Size.X / 2, CF.Y - Size.Y / 2, CF.Z - Size.Z / 2);
							Vector3.new(CF.X + Size.X / 2, CF.Y - Size.Y / 2, CF.Z - Size.Z / 2);
							Vector3.new(CF.X - Size.X / 2, CF.Y + Size.Y / 2, CF.Z - Size.Z / 2);
							Vector3.new(CF.X + Size.X / 2, CF.Y + Size.Y / 2, CF.Z - Size.Z / 2);
							Vector3.new(CF.X - Size.X / 2, CF.Y - Size.Y / 2, CF.Z + Size.Z / 2);
							Vector3.new(CF.X + Size.X / 2, CF.Y - Size.Y / 2, CF.Z + Size.Z / 2);
						};
	
						for i, v in pairs(Corners) do
							table.insert(AllCorners, v);
						end
	
						-- break
					end
	
					local xMin, yMin = Camera.ViewportSize.X, Camera.ViewportSize.Y;
					local xMax, yMax = 0, 0;
					local Vs = true;
	
					for i, v in pairs(AllCorners) do				
						local Position, V = WorldToViewport(v);
	
						if VS and not V then Vs = false break end
	
						if Position.X > xMax then
							xMax = Position.X;
						end
						if Position.X < xMin then
							xMin = Position.X;
						end
						if Position.Y > yMax then
							yMax = Position.Y;
						end
						if Position.Y < yMin then
							yMin = Position.Y;
						end
					end
	
					local xSize, ySize = xMax - xMin, yMax - yMin;
	
					local Outline = Box['OutlineSquare'];
					local Square = Box['Square'];
					Outline.Visible = Vs;
					Square.Visible = Vs;
					Square.Position = V2New(xMin, yMin);
					Square.Color	= Color;
					Square.Thickness = math.floor(Outline.Thickness * 0.3);
					-- Square.Position = V2New(xMin, yMin);
					Square.Size = V2New(xSize, ySize);
					Outline.Position = Square.Position;
					Outline.Size = Square.Size;
					Outline.Color = Color3.new(0.12, 0.12, 0.12);
					Outline.Transparency = 0.75;
	
					return
				end
	
				local TLPos, Visible1	= WorldToViewport((CF * CFrame.new( Size.X,  Size.Y, 0)).Position);
				local TRPos, Visible2	= WorldToViewport((CF * CFrame.new(-Size.X,  Size.Y, 0)).Position);
				local BLPos, Visible3	= WorldToViewport((CF * CFrame.new( Size.X, -Size.Y, 0)).Position);
				local BRPos, Visible4	= WorldToViewport((CF * CFrame.new(-Size.X, -Size.Y, 0)).Position);
	
				local Quad = Box['Quad'];
	
				if syn then
					if Visible1 and Visible2 and Visible3 and Visible4 then
						Quad.Visible = true;
						Quad.Color	= Color;
						Quad.PointA = V2New(TLPos.X, TLPos.Y);
						Quad.PointB = V2New(TRPos.X, TRPos.Y);
						Quad.PointC = V2New(BRPos.X, BRPos.Y);
						Quad.PointD = V2New(BLPos.X, BLPos.Y);
					else
						Box['Quad'].Visible = false;
					end
				else
					Visible1 = TLPos.Z > 0 -- (commented | reason: random flashes);
					Visible2 = TRPos.Z > 0 -- (commented | reason: random flashes);
					Visible3 = BLPos.Z > 0 -- (commented | reason: random flashes);
					Visible4 = BRPos.Z > 0 -- (commented | reason: random flashes);
	
					-- ## BEGIN UGLY CODE
					if Visible1 then
						Box['TopLeft'].Visible		= true;
						Box['TopLeft'].Color		= Color;
						Box['TopLeft'].From			= V2New(TLPos.X, TLPos.Y);
						Box['TopLeft'].To			= V2New(TRPos.X, TRPos.Y);
					else
						Box['TopLeft'].Visible		= false;
					end
					if Visible2 then
						Box['TopRight'].Visible		= true;
						Box['TopRight'].Color		= Color;
						Box['TopRight'].From		= V2New(TRPos.X, TRPos.Y);
						Box['TopRight'].To			= V2New(BRPos.X, BRPos.Y);
					else
						Box['TopRight'].Visible		= false;
					end
					if Visible3 then
						Box['BottomLeft'].Visible	= true;
						Box['BottomLeft'].Color		= Color;
						Box['BottomLeft'].From		= V2New(BLPos.X, BLPos.Y);
						Box['BottomLeft'].To		= V2New(TLPos.X, TLPos.Y);
					else
						Box['BottomLeft'].Visible	= false;
					end
					if Visible4 then
						Box['BottomRight'].Visible	= true;
						Box['BottomRight'].Color	= Color;
						Box['BottomRight'].From		= V2New(BRPos.X, BRPos.Y);
						Box['BottomRight'].To		= V2New(BLPos.X, BLPos.Y);
					else
						Box['BottomRight'].Visible	= false;
					end
					-- ## END UGLY CODE
					if Properties and typeof(Properties) == 'table' then
						GetTableData(Properties)(function(i, v)
							pcall(Set, Box['TopLeft'],		i, v);
							pcall(Set, Box['TopRight'],		i, v);
							pcall(Set, Box['BottomLeft'],	i, v);
							pcall(Set, Box['BottomRight'],	i, v);
						end)
					end
				end
			end
			function Box:SetVisible(bool)
				if shared.am_ic3 then
					Box['Square'].Visible = bool;
					Box['OutlineSquare'].Visible = bool;
				else
					pcall(Set, Box['Quad'],				'Visible', bool);
				end
				-- pcall(Set, Box['TopLeft'],		'Visible', bool);
				-- pcall(Set, Box['TopRight'],		'Visible', bool);
				-- pcall(Set, Box['BottomLeft'],	'Visible', bool);
				-- pcall(Set, Box['BottomRight'],	'Visible', bool);
			end
			function Box:Remove()
				self:SetVisible(false);
				if shared.am_ic3 then
					Box['Square']:Remove();
					Box['OutlineSquare']:Remove();
				else
					Box['Quad']:Remove();
				end
				-- Box['TopLeft']:Remove();
				-- Box['TopRight']:Remove();
				-- Box['BottomLeft']:Remove();
				-- Box['BottomRight']:Remove();
			end
	
			return Box;
		end
	
		local Colors = {
			White = FromHex'ffffff';
			Primary = {
				Main	= FromHex'424242';
				Light	= FromHex'6d6d6d';
				Dark	= FromHex'1b1b1b';
			};
			Secondary = {
				Main	= FromHex'e0e0e0';
				Light	= FromHex'ffffff';
				Dark	= FromHex'aeaeae';
			};
		};
	
		function Connections:Listen(Connection, Function)
			local NewConnection = Connection:Connect(Function);
			table.insert(self.Active, NewConnection);
			return NewConnection;
		end
	
		function Connections:DisconnectAll()
			for Index, Connection in pairs(self.Active) do
				if Connection.Connected then
					Connection:Disconnect();
				end
			end
	
			self.Active = {};
		end
	
		function Signal.new()
			local self = setmetatable({ _BindableEvent = Instance.new'BindableEvent' }, Signal);
	
			return self;
		end
	
		function Signal:Connect(Callback)
			assert(typeof(Callback) == 'function', 'function expected; got ' .. typeof(Callback));
	
			return self._BindableEvent.Event:Connect(function(...) Callback(...) end);
		end
	
		function Signal:Fire(...)
			self._BindableEvent:Fire(...);
		end
	
		function Signal:Wait()
			local Arguments = self._BindableEvent:Wait();
	
			return Arguments;
		end
	
		function Signal:Disconnect()
			if self._BindableEvent then
				self._BindableEvent:Destroy();
			end
		end
	
		local function GetMouseLocation()
			return UserInputService:GetMouseLocation();
		end
	
		local function IsMouseOverDrawing(Drawing, MousePosition)
			local TopLeft = Drawing.Position;
			local BottomRight = Drawing.Position + Drawing.Size;
			local MousePosition = MousePosition or GetMouseLocation();
	
			return MousePosition.X > TopLeft.X and MousePosition.Y > TopLeft.Y and MousePosition.X < BottomRight.X and MousePosition.Y < BottomRight.Y;
		end
	
		local ImageCache = {};
	
		local function SetImage(Drawing, Url)
			local Data = IsSynapse and game:HttpGet(Url) or Url;
	
			print(Drawing, IsSynapse)
	
			Drawing[IsSynapse and 'Data' or 'Uri'] = ImageCache[Url] or Data;
			ImageCache[Url] = Data;
	
			if not IsSynapse then repeat wait() until Drawing.Loaded; end
		end
	
		-- oh god unnamed esp needs an entire rewrite, someone make a better one pls im too lazy
		-- btw the color picker was made seperately so it doesnt fit with the code of unnamed esp
	
		local function CreateDrawingsTable()
			local Drawings = { __Objects = {} };
			local Metatable = {};
	
			function Metatable.__index(self, Index)
				local Object = rawget(self.__Objects, Index);
	
				if not Object or (IsSynapse and not Object.__SELF.__OBJECT_EXISTS) then
					local Type = Index:sub(1, Index:find'-' - 1);
	
					Success, Object = pcall(Drawing.new, Type);
	
					if not Object or not Success then return function() end; end
	
					self.__Objects[Index] = setmetatable({ __SELF = Object; Type = Type }, {
						__call = function(self, Properties)
							local Object = rawget(self, '__SELF'); if IsSynapse and not Object.__OBJECT_EXISTS then return false, 'render object destroyed'; end
	
							if Properties == false then
								Object.Visible = false;
								Object.Transparency = 0;
								Object:Remove();
	
								return true;
							end
	
							if typeof(Properties) == 'table' then
								for Property, Value in pairs(Properties) do
									local CanSet = true;
	
									if self.Type == 'Image' and not IsSynapse and Property == 'Size' and typeof(Value) == 'Vector2' then
										CanSet = false;
	
										spawn(function()
											repeat wait() until Object.Loaded;
											if not self.DefaultSize then rawset(self, 'DefaultSize', Object.Size) end
	
											Property = 'ScaleFactor';
											Value = Value.X / self.DefaultSize.X;
	
											Object[Property] = Value
										end)
									end
	
									if CanSet then Object[Property] = Value end
								end
							end
	
							return Object;
						end
					});
	
					Object.Visible = true;
					Object.Transparency = 1; -- Transparency is really Opacity with drawing api (1 being visible, 0 being invisible)
	
					if Type == 'Text' then
						if Drawing.Fonts then Object.Font = Drawing.Fonts.Monospace end
						Object.Size = 20;
						Object.Color = Color3.new(1, 1, 1);
						Object.Center = true;
						Object.Outline = true;
						OutlineOpacity = 0.5;
					elseif Type == 'Square' or Type == 'Rectangle' then
						Object.Thickness = 2;
						Object.Filled = false;
					end
	
					return self.__Objects[Index];
				end
	
				return Object;
			end
	
			function Metatable.__call(self, Delete, ...)
				local Arguments = {Delete, ...};
	
				if Delete == false then
					for Index, Drawing in pairs(rawget(self, '__Objects')) do
						Drawing(false);
					end
				end
			end
	
			return setmetatable(Drawings, Metatable);
		end
	
		local Images = {};
	
		spawn(function()
			Images.Ring = 'https://i.imgur.com/q4qx26f.png';
			Images.Overlay = 'https://i.imgur.com/gOCxbsR.png';
		end)
	
		function ColorPicker.new(Position, Size, Color)
			ColorPicker.LastGenerated = tick();
			ColorPicker.Loading = true;
	
			local Picker = { Color = Color or Color3.new(1, 1, 1); HSV = { H = 0, S = 1, V = 1 } };
			local Drawings = CreateDrawingsTable();
			local Position = Position or V2New();
			local Size = Size or 150;
			local Padding = { 10, 10, 10, 10 };
	
			Picker.ColorChanged = Signal.new();
	
			local Background = Drawings['Square-Background'] {
				Color = Color3.fromRGB(33, 33, 33);
				Filled = false;
				Visible = false;
				Position = Position - V2New(Padding[4], Padding[1]);
				Size = V2New(Size, Size) + V2New(Padding[4] + Padding[2], Padding[1] + Padding[3]);
			};
			local ColorPreview = Drawings['Circle-Preview'] {
				Position = Position + (V2New(Size, Size) / 2);
				Radius = Size / 2 - 8;
				Filled = true;
				Thickness = 0;
				NumSides = 20;
				Color = Color3.new(1, 0, 0);
			};
			local Main = Drawings['Image-Main'] {
				Position = Position;
				Size = V2New(Size, Size);
			}; SetImage(Main, Images.Ring);
			local Preview = Drawings['Square-Preview'] {
				Position = Main.Position + (Main.Size / 4.5);
				Size = Main.Size / 1.75;
				Color = Color3.new(1, 0, 0);
				Filled = true;
				Thickness = 0;
			};
			local Overlay = Drawings['Image-Overlay'] {
				Position = Preview.Position;
				Size = Preview.Size;
				Transparency = 1;
			}; SetImage(Overlay, Images.Overlay);
			local CursorOutline = Drawings['Circle-CursorOutline'] {
				Radius = 4;
				Thickness = 2;
				Filled = false;
				Color = Color3.new(0.2, 0.2, 0.2);
				Position = V2New(Main.Position.X + Main.Size.X - 10, Main.Position.Y + (Main.Size.Y / 2));
			};
			local Cursor = Drawings['Circle-Cursor'] {
				Radius = 3;
				Transparency = 1;
				Filled = true;
				Color = Color3.new(1, 1, 1);
				Position = CursorOutline.Position;
			};
			local CursorOutline = Drawings['Circle-CursorOutlineSquare'] {
				Radius = 4;
				Thickness = 2;
				Filled = false;
				Color = Color3.new(0.2, 0.2, 0.2);
				Position = V2New(Preview.Position.X + Preview.Size.X - 2, Preview.Position.Y + 2);
			};
			Drawings['Circle-CursorSquare'] {
				Radius = 3;
				Transparency = 1;
				Filled = true;
				Color = Color3.new(1, 1, 1);
				Position = CursorOutline.Position;
			};
	
			function Picker:UpdatePosition(Input)
				local MousePosition = V2New(Input.Position.X, Input.Position.Y + 33);
	
				if self.MouseHeld then
					if self.Item == 'Ring' then
						local Main = self.Drawings['Image-Main'] ();
						local Preview = self.Drawings['Square-Preview'] ();
						local Bounds = Main.Size / 2;
						local Center = Main.Position + Bounds;
						local Relative = MousePosition - Center;
						local Direction = Relative.unit;
						local Position = Center + Direction * Main.Size.X / 2.15;
						local H = (math.atan2(Position.Y - Center.Y, Position.X - Center.X)) * 60;
						if H < 0 then H = 360 + H; end
						H = H / 360;
						self.HSV.H = H;
						local EndColor = Color3.fromHSV(H, self.HSV.S, self.HSV.V); if EndColor ~= self.Color then self.ColorChanged:Fire(self.Color); end
						local Pointer = self.Drawings['Circle-Cursor'] { Position = Position };
						self.Drawings['Circle-CursorOutline'] { Position = Pointer.Position };
						Bounds = Bounds * 2;
						Preview.Color = Color3.fromHSV(H, 1, 1);
						self.Color = EndColor;
						self.Drawings['Circle-Preview'] { Color = EndColor };
					elseif self.Item == 'HL' then
						local Preview = self.Drawings['Square-Preview'] ();
						local HSV = self.HSV;
						local Position = V2New(math.clamp(MousePosition.X, Preview.Position.X, Preview.Position.X + Preview.Size.X), math.clamp(MousePosition.Y, Preview.Position.Y, Preview.Position.Y + Preview.Size.Y));
						HSV.S = (Position.X - Preview.Position.X) / Preview.Size.X;
						HSV.V = 1 - (Position.Y - Preview.Position.Y) / Preview.Size.Y;
						local EndColor = Color3.fromHSV(HSV.H, HSV.S, HSV.V); if EndColor ~= self.Color then self.ColorChanged:Fire(self.Color); end
						self.Color = EndColor;
						self.Drawings['Circle-Preview'] { Color = EndColor };
						local Pointer = self.Drawings['Circle-CursorSquare'] { Position = Position };
						self.Drawings['Circle-CursorOutlineSquare'] { Position = Pointer.Position };
					end
				end
			end
	
			function Picker:HandleInput(Input, P, Type)
				if Type == 'Began' then
					if Input.UserInputType.Name == 'MouseButton1' then
						local Main = self.Drawings['Image-Main'] ();
						local SquareSV = self.Drawings['Square-Preview'] ();
						local MousePosition = V2New(Input.Position.X, Input.Position.Y + 33);
						self.MouseHeld = true;
						local Bounds = Main.Size / 2;
						local Center = Main.Position + Bounds;
						local R = (MousePosition - Center);
	
						if R.Magnitude < Bounds.X and R.Magnitude > Bounds.X - 20 then
							self.Item = 'Ring';
						end
	
						if MousePosition.X > SquareSV.Position.X and MousePosition.Y > SquareSV.Position.Y and MousePosition.X < SquareSV.Position.X + SquareSV.Size.X and MousePosition.Y < SquareSV.Position.Y + SquareSV.Size.Y then
							self.Item = 'HL';
						end
	
						self:UpdatePosition(Input, P);
					end
				elseif Type == 'Changed' then
					if Input.UserInputType.Name == 'MouseMovement' then
						self:UpdatePosition(Input, P);
					end
				elseif Type == 'Ended' and Input.UserInputType.Name == 'MouseButton1' then
					self.Item = nil;
				end
			end
	
			function Picker:Dispose()
				self.Drawings(false);
				self.UpdatePosition = nil;
				self.HandleInput = nil;
				Connections:DisconnectAll(); -- scuffed tbh
			end
	
			Connections:Listen(UserInputService.InputBegan, function(Input, Process)
				Picker:HandleInput(Input, Process, 'Began');
			end);
			Connections:Listen(UserInputService.InputChanged, function(Input, Process)
				if Input.UserInputType.Name == 'MouseMovement' then
					local MousePosition = V2New(Input.Position.X, Input.Position.Y + 33);
					local Cursor = Picker.Drawings['Triangle-Cursor'] {
						Filled = true;
						Color = Color3.new(0.9, 0.9, 0.9);
						PointA = MousePosition + V2New(0, 0);
						PointB = MousePosition + V2New(12, 14);
						PointC = MousePosition + V2New(0, 18);
						Thickness = 0;
					};
				end
				Picker:HandleInput(Input, Process, 'Changed');
			end);
			Connections:Listen(UserInputService.InputEnded, function(Input, Process)
				Picker:HandleInput(Input, Process, 'Ended');
	
				if Input.UserInputType.Name == 'MouseButton1' then
					Picker.MouseHeld = false;
				end
			end);
	
			ColorPicker.Loading = false;
	
			Picker.Drawings = Drawings;
			return Picker;
		end
	
		function SubMenu:Show(Position, Title, Options)
			self.Open = true;
	
			local Visible = true;
			local BasePosition = Position;
			local BaseSize = V2New(200, 140);
			local End = BasePosition + BaseSize;
	
			self.Bounds = { BasePosition.X, BasePosition.Y, End.X, End.Y };
	
			delay(0.025, function()
				if not self.Open then return; end
	
				Menu:AddMenuInstance('Sub-Main', 'Square', {
					Size		= BaseSize;
					Position	= BasePosition;
					Filled		= false;
					Color		= Colors.Primary.Main;
					Thickness	= 3;
					Visible		= Visible;
				});
			end);
			Menu:AddMenuInstance('Sub-TopBar', 'Square', {
				Position	= BasePosition;
				Size		= V2New(BaseSize.X, 10);
				Color		= Colors.Primary.Dark;
				Filled		= true;
				Visible		= Visible;
			});
			Menu:AddMenuInstance('Sub-TopBarTwo', 'Square', {
				Position 	= BasePosition + V2New(0, 10);
				Size		= V2New(BaseSize.X, 20);
				Color		= Colors.Primary.Main;
				Filled		= true;
				Visible		= Visible;
			});
			Menu:AddMenuInstance('Sub-TopBarText', 'Text', {
				Size 		= 20;
				Position	= shared.MenuDrawingData.Instances['Sub-TopBarTwo'].Position + V2New(15, -3);
				Text		= Title or '';
				Color		= Colors.Secondary.Light;
				Visible		= Visible;
			});
			Menu:AddMenuInstance('Sub-Filling', 'Square', {
				Size		= BaseSize - V2New(0, 30);
				Position	= BasePosition + V2New(0, 30);
				Filled		= true;
				Color		= Colors.Secondary.Main;
				Transparency= .75;
				Visible		= Visible;
			});
	
			if Options then
				for Index, Option in pairs(Options) do -- currently only supports color and button(but color is a button so), planning on fully rewriting or something
					local function GetName(Name) return ('Sub-%s.%d'):format(Name, Index) end
					local Position = shared.MenuDrawingData.Instances['Sub-Filling'].Position + V2New(20, Index * 25 - 10);
					-- local BasePosition	= shared.MenuDrawingData.Instances.Filling.Position + V2New(30, v.Index * 25 - 10);
	
					if Option.Type == 'Color' then
						local ColorPreview = Menu:AddMenuInstance(GetName'ColorPreview', 'Circle', {
							Position = Position;
							Color = Option.Color;
							Radius = IsSynapse and 10 or 10;
							NumSides = 10;
							Filled = true;
							Visible = true;
						});
						local Text = Menu:AddMenuInstance(GetName'Text', 'Text', {
							Text = Option.Text;
							Position = ColorPreview.Position + V2New(15, -8);
							Size = 16;
							Color = Colors.Primary.Dark;
							Visible = true;
						});
						UIButtons[#UIButtons + 1] = {
							FromSubMenu = true;
							Option = function() return Option.Function(ColorPreview, BasePosition + V2New(BaseSize.X, 0)) end;
							Instance = Menu:AddMenuInstance(Format('%s_Hitbox', GetName'Button'), 'Square', {
								Position	= Position - V2New(20, 12);
								Size		= V2New(BaseSize.X, 25);
								Visible		= false;
							});
						};
					elseif Option.Type == 'Button' then
						UIButtons[#UIButtons + 1] = {
							FromSubMenu = true;
							Option = Option.Function;
							Instance = Menu:AddMenuInstance(Format('%s_Hitbox', GetName'Button'), 'Square', {
								Size		= V2New(BaseSize.X, 20) - V2New(20, 0);
								Visible		= true;
								Transparency= .5;
								Position	= Position - V2New(10, 10);
								Color		= Colors.Secondary.Light;
								Filled		= true;
							});
						};
						local Text		= Menu:AddMenuInstance(Format('%s_Text', GetName'Text'), 'Text', {
							Text		= Option.Text;
							Size		= 18;
							Position	= Position + V2New(5, -10);
							Visible		= true;
							Color		= Colors.Primary.Dark;
						});
					end
				end
			end
		end
	
		function SubMenu:Hide()
			self.Open = false;
	
			for i, v in pairs(shared.MenuDrawingData.Instances) do
				if i:sub(1, 3) == 'Sub' then
					v.Visible = false;
	
					if i:sub(4, 4) == ':' then -- ';' = Temporary so remove
						v:Remove();
						shared.MenuDrawingData.Instance[i] = nil;
					end
				end
			end
	
			for i, Button in pairs(UIButtons) do
				if Button.FromSubMenu then
					UIButtons[i] = nil;
				end
			end
	
			spawn(function() -- stupid bug happens if i dont use this
				for i = 1, 10 do
					if shared.CurrentColorPicker then -- dont know why 'CurrentColorPicker' isnt a variable in this
						shared.CurrentColorPicker:Dispose();
					end
					wait(0.1);
				end
			end)
	
			CurrentColorPicker = nil;
		end
	
		function CreateMenu(NewPosition) -- Create Menu
			MenuLoaded = false;
			UIButtons  = {};
			Sliders	   = {};
	
			local BaseSize = V2New(300, 625);
			local BasePosition = NewPosition or V2New(Camera.ViewportSize.X / 8 - (BaseSize.X / 2), Camera.ViewportSize.Y / 2 - (BaseSize.Y / 2));
	
			BasePosition = V2New(math.clamp(BasePosition.X, 0, Camera.ViewportSize.X), math.clamp(BasePosition.Y, 0, Camera.ViewportSize.Y));
	
			Menu:AddMenuInstance('CrosshairX', 'Line', {
				Visible			= false;
				Color			= Color3.new(0, 1, 0);
				Transparency	= 1;
				Thickness		= 1;
			});
			Menu:AddMenuInstance('CrosshairY', 'Line', {
				Visible			= false;
				Color			= Color3.new(0, 1, 0);
				Transparency	= 1;
				Thickness		= 1;
			});
	
			delay(.025, function() -- since zindex doesnt exist
				Menu:AddMenuInstance('Main', 'Square', {
					Size		= BaseSize;
					Position	= BasePosition;
					Filled		= false;
					Color		= Colors.Primary.Main;
					Thickness	= 3;
					Visible		= true;
				});
			end);
			Menu:AddMenuInstance('TopBar', 'Square', {
				Position	= BasePosition;
				Size		= V2New(BaseSize.X, 15);
				Color		= Colors.Primary.Dark;
				Filled		= true;
				Visible		= true;
			});
			Menu:AddMenuInstance('TopBarTwo', 'Square', {
				Position 	= BasePosition + V2New(0, 15);
				Size		= V2New(BaseSize.X, 45);
				Color		= Colors.Primary.Main;
				Filled		= true;
				Visible		= true;
			});
			Menu:AddMenuInstance('TopBarText', 'Text', {
				Size 		= 25;
				Position	= shared.MenuDrawingData.Instances.TopBarTwo.Position + V2New(25, 10);
				Text		= 'Unnamed ESP';
				Color		= Colors.Secondary.Light;
				Visible		= true;
				Transparency= 1; -- proto outline fix
				Outline 	= true;
				OutlineOpacity = 0.5;
			});
			Menu:AddMenuInstance('TopBarTextBR', 'Text', {
				Size 		= 18;
				Position	= shared.MenuDrawingData.Instances.TopBarTwo.Position + V2New(BaseSize.X - 75, 25);
				Text		= 'by ic3w0lf';
				Color		= Colors.Secondary.Light;
				Visible		= true;
				Transparency= 1;
				Outline 	= true;
				OutlineOpacity = 0.5;
			});
			Menu:AddMenuInstance('Filling', 'Square', {
				Size		= BaseSize - V2New(0, 60);
				Position	= BasePosition + V2New(0, 60);
				Filled		= true;
				Color		= Colors.Secondary.Main;
				Transparency= .5;
				Visible		= true;
			});
	
			local CPos = 0;
	
			GetTableData(Options)(function(i, v)
				if typeof(v.Value) == 'boolean' and not IsStringEmpty(v.Text) and v.Text ~= nil then
					CPos 				= CPos + 25;
					local BaseSize		= V2New(BaseSize.X, 30);
					local BasePosition	= shared.MenuDrawingData.Instances.Filling.Position + V2New(30, v.Index * 25 - 10);
					UIButtons[#UIButtons + 1] = {
						Option = v;
						Instance = Menu:AddMenuInstance(Format('%s_Hitbox', v.Name), 'Square', {
							Position	= BasePosition - V2New(30, 15);
							Size		= BaseSize;
							Visible		= false;
						});
					};
					Menu:AddMenuInstance(Format('%s_OuterCircle', v.Name), 'Circle', {
						Radius		= 10;
						Position	= BasePosition;
						Color		= Colors.Secondary.Light;
						Filled		= true;
						Visible		= true;
					});
					Menu:AddMenuInstance(Format('%s_InnerCircle', v.Name), 'Circle', {
						Radius		= 7;
						Position	= BasePosition;
						Color		= Colors.Secondary.Dark;
						Filled		= true;
						Visible		= v.Value;
					});
					Menu:AddMenuInstance(Format('%s_Text', v.Name), 'Text', {
						Text		= v.Text;
						Size		= 20;
						Position	= BasePosition + V2New(20, -10);
						Visible		= true;
						Color		= Colors.Secondary.Light;
						Transparency= 1;
						Outline		= true;
						OutlineOpacity = 0.5;
					});
				end
			end)
			GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
				if typeof(v.Value) == 'number' then
					CPos 				= CPos + 25;
	
					local BaseSize		= V2New(BaseSize.X, 30);
					local BasePosition	= shared.MenuDrawingData.Instances.Filling.Position + V2New(0, CPos - 10);
	
					local Line			= Menu:AddMenuInstance(Format('%s_SliderLine', v.Name), 'Square', {
						Transparency	= 1;
						Color			= Colors.Secondary.Light;
						-- Thickness		= 3;
						Filled			= true;
						Visible			= true;
						Position 		= BasePosition + V2New(15, -5);
						Size 			= BaseSize - V2New(30, 10);
						Transparency	= 0.5;
					});
					local Slider		= Menu:AddMenuInstance(Format('%s_Slider', v.Name), 'Square', {
						Visible			= true;
						Filled			= true;
						Color			= Colors.Primary.Dark;
						Size			= V2New(5, Line.Size.Y);
						Transparency	= 0.5;
					});
					local Text			= Menu:AddMenuInstance(Format('%s_Text', v.Name), 'Text', {
						Text			= v.Text;
						Size			= 20;
						Center			= true;
						Transparency	= 1;
						Outline			= true;
						OutlineOpacity  = 0.5;
						Visible			= true;
						Color			= Colors.White;
					}); Text.Position	= Line.Position + (Line.Size / 2) - V2New(0, Text.TextBounds.Y / 1.75);
					local AMT			= Menu:AddMenuInstance(Format('%s_AmountText', v.Name), 'Text', {
						Text			= tostring(v.Value);
						Size			= 22;
						Center			= true;
						Transparency	= 1;
						Outline			= true;
						OutlineOpacity  = 0.5;
						Visible			= true;
						Color			= Colors.White;
						Position		= Text.Position;
					});
	
					local CSlider = {Slider = Slider; Line = Line; Min = v.AllArgs[4]; Max = v.AllArgs[5]; Option = v};
					local Dummy = Instance.new'NumberValue';
	
					Dummy:GetPropertyChangedSignal'Value':Connect(function()
						Text.Transparency = Dummy.Value;
						-- Text.OutlineTransparency = 1 - Dummy.Value;
						AMT.Transparency = 1 - Dummy.Value;
					end);
	
					Dummy.Value = 1;
	
					function CSlider:ShowValue(Bool)
						self.ShowingValue = Bool;
	
						TweenService:Create(Dummy, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), { Value = Bool and 0 or 1 }):Play();
					end
	
					Sliders[#Sliders + 1] = CSlider;
	
					-- local Percent = (v.Value / CSlider.Max) * 100;
					-- local Size = math.abs(Line.From.X - Line.To.X);
					-- local Value = Size * (Percent / 100); -- this shit's inaccurate but fuck it i'm not even gonna bother fixing it
	
					Slider.Position = Line.Position + V2New(35, 0);
	
					v.BaseSize = BaseSize;
					v.BasePosition = BasePosition;
					-- AMT.Position = BasePosition + V2New(BaseSize.X - AMT.TextBounds.X - 10, -10)
				end
			end)
			local FirstItem = false;
			GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
				if typeof(v.Value) == 'EnumItem' then
					CPos 				= CPos + (not FirstItem and 30 or 25);
					FirstItem			= true;
	
					local BaseSize		= V2New(BaseSize.X, FirstItem and 30 or 25);
					local BasePosition	= shared.MenuDrawingData.Instances.Filling.Position + V2New(0, CPos - 10);
	
					UIButtons[#UIButtons + 1] = {
						Option = v;
						Instance = Menu:AddMenuInstance(Format('%s_Hitbox', v.Name), 'Square', {
							Size		= V2New(BaseSize.X, 20) - V2New(30, 0);
							Visible		= true;
							Transparency= .5;
							Position	= BasePosition + V2New(15, -10);
							Color		= Colors.Secondary.Light;
							Filled		= true;
						});
					};
					local Text		= Menu:AddMenuInstance(Format('%s_Text', v.Name), 'Text', {
						Text		= v.Text;
						Size		= 20;
						Position	= BasePosition + V2New(20, -10);
						Visible		= true;
						Color		= Colors.Secondary.Light;
						Transparency= 1;
						Outline		= true;
						OutlineOpacity = 0.5;
					});
					local BindText	= Menu:AddMenuInstance(Format('%s_BindText', v.Name), 'Text', {
						Text		= tostring(v.Value):match'%w+%.%w+%.(.+)';
						Size		= 20;
						Position	= BasePosition;
						Visible		= true;
						Color		= Colors.Secondary.Light;
						Transparency= 1;
						Outline		= true;
						OutlineOpacity = 0.5;
					});
	
					Options[i].BaseSize = BaseSize;
					Options[i].BasePosition = BasePosition;
					BindText.Position = BasePosition + V2New(BaseSize.X - BindText.TextBounds.X - 20, -10);
				end
			end)
			GetTableData(Options)(function(i, v) -- just to make sure certain things are drawn before or after others, too lazy to actually sort table
				if typeof(v.Value) == 'function' then
					local BaseSize		= V2New(BaseSize.X, 30);
					local BasePosition	= shared.MenuDrawingData.Instances.Filling.Position + V2New(0, CPos + (25 * v.AllArgs[4]) - 35);
	
					UIButtons[#UIButtons + 1] = {
						Option = v;
						Instance = Menu:AddMenuInstance(Format('%s_Hitbox', v.Name), 'Square', {
							Size		= V2New(BaseSize.X, 20) - V2New(30, 0);
							Visible		= true;
							Transparency= .5;
							Position	= BasePosition + V2New(15, -10);
							Color		= Colors.Secondary.Light;
							Filled		= true;
						});
					};
					local Text		= Menu:AddMenuInstance(Format('%s_Text', v.Name), 'Text', {
						Text		= v.Text;
						Size		= 20;
						Position	= BasePosition + V2New(20, -10);
						Visible		= true;
						Color		= Colors.Secondary.Light;
						Transparency= 1;
						Outline		= true;
						OutlineOpacity = 0.5;
					});
	
					-- BindText.Position = BasePosition + V2New(BaseSize.X - BindText.TextBounds.X - 10, -10);
				end
			end)
	
			delay(.1, function()
				MenuLoaded = true;
			end);
	
			-- this has to be at the bottom cuz proto drawing api doesnt have zindex :triumph:	
			Menu:AddMenuInstance('Cursor1', 'Line', {
				Visible			= false;
				Color			= Color3.new(1, 0, 0);
				Transparency	= 1;
				Thickness		= 2;
			});
			Menu:AddMenuInstance('Cursor2', 'Line', {
				Visible			= false;
				Color			= Color3.new(1, 0, 0);
				Transparency	= 1;
				Thickness		= 2;
			});
			Menu:AddMenuInstance('Cursor3', 'Line', {
				Visible			= false;
				Color			= Color3.new(1, 0, 0);
				Transparency	= 1;
				Thickness		= 2;
			});
		end
	
		CreateMenu();
		delay(0.1, function()
			SubMenu:Show(V2New()); -- Create the submenu
			SubMenu:Hide();
		end);
	
		shared.UESP_InputChangedCon = UserInputService.InputChanged:Connect(function(input)
			if input.UserInputType.Name == 'MouseMovement' and Options.MenuOpen.Value then
				for i, v in pairs(Sliders) do
					local Values = {
						v.Line.Position.X;
						v.Line.Position.Y;
						v.Line.Position.X + v.Line.Size.X;
						v.Line.Position.Y + v.Line.Size.Y;
					};
					if MouseHoveringOver(Values) then
						v:ShowValue(true);
					else
						if not MouseHeld then v:ShowValue(false); end
					end
				end
			end
		end)
		shared.UESP_InputBeganCon = UserInputService.InputBegan:Connect(function(input)
			if input.UserInputType.Name == 'MouseButton1' and Options.MenuOpen.Value then
				MouseHeld = true;
				local Bar = Menu:GetInstance'TopBar';
				local Values = {
					Bar.Position.X;
					Bar.Position.Y;
					Bar.Position.X + Bar.Size.X;
					Bar.Position.Y + Bar.Size.Y;
				}
				if MouseHoveringOver(Values) then
					DraggingUI = true;
					DragOffset = Menu:GetInstance'Main'.Position - GetMouseLocation();
				else
					for i, v in pairs(Sliders) do
						local Values = {
							v.Line.Position.X;
							v.Line.Position.Y;
							v.Line.Position.X + v.Line.Size.X;
							v.Line.Position.Y + v.Line.Size.Y;
							-- v.Line.From.X	- (v.Slider.Radius);
							-- v.Line.From.Y	- (v.Slider.Radius);
							-- v.Line.To.X		+ (v.Slider.Radius);
							-- v.Line.To.Y		+ (v.Slider.Radius);
						};
						if MouseHoveringOver(Values) then
							DraggingWhat = v;
							Dragging = true;
							break
						end
					end
	
					if not Dragging then
						local Values = {
							TracerPosition.X - 10;
							TracerPosition.Y - 10;
							TracerPosition.X + 10;
							TracerPosition.Y + 10;
						};
						if MouseHoveringOver(Values) then
							DragTracerPosition = true;
						end
					end
				end
			end
		end)
		shared.UESP_InputEndedCon = UserInputService.InputEnded:Connect(function(input)
			if input.UserInputType.Name == 'MouseButton1' and Options.MenuOpen.Value then
				MouseHeld = false;
				DragTracerPosition = false;
				local IgnoreOtherInput = false;
	
				if SubMenu.Open and not MouseHoveringOver(SubMenu.Bounds) then
					if CurrentColorPicker and IsMouseOverDrawing(CurrentColorPicker.Drawings['Square-Background']()) then IgnoreOtherInput = true; end
					if not IgnoreOtherInput then SubMenu:Hide() end
				end
	
				if not IgnoreOtherInput then
					for i, v in pairs(UIButtons) do
						if SubMenu.Open and MouseHoveringOver(SubMenu.Bounds) and not v.FromSubMenu then continue end
	
						local Values = {
							v.Instance.Position.X;
							v.Instance.Position.Y;
							v.Instance.Position.X + v.Instance.Size.X;
							v.Instance.Position.Y + v.Instance.Size.Y;
						};
						if MouseHoveringOver(Values) then
							v.Option();
							IgnoreOtherInput = true;
							break -- prevent clicking 2 options
						end
					end
					for i, v in pairs(Sliders) do
						if IgnoreOtherInput then break end
	
						local Values = {
							v.Line.Position.X;
							v.Line.Position.Y;
							v.Line.Position.X + v.Line.Size.X;
							v.Line.Position.Y + v.Line.Size.Y;
						};
						if not MouseHoveringOver(Values) then
							v:ShowValue(false);
						end
					end
				end
			elseif input.UserInputType.Name == 'MouseButton2' and Options.MenuOpen.Value and not DragTracerPosition then
				local Values = {
					TracerPosition.X - 10;
					TracerPosition.Y - 10;
					TracerPosition.X + 10;
					TracerPosition.Y + 10;
				}
				if MouseHoveringOver(Values) then
					DragTracerPosition = false;
					TracerPosition = V2New(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y - 135);
				end
			elseif input.UserInputType.Name == 'Keyboard' then
				if Binding then
					BindedKey = input.KeyCode;
					Binding = false;
				elseif input.KeyCode == Options.MenuKey.Value or (input.KeyCode == Enum.KeyCode.Home and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl)) then
					Options.MenuOpen();
				elseif input.KeyCode == Options.ToggleKey.Value then
					Options.Enabled();
				elseif input.KeyCode.Name == 'F1' and UserInputService:IsMouseButtonPressed(1) and shared.am_ic3 then -- hehe hiden spectate feature cuz why not
					local HD, LPlayer, LCharacter = 0.95;
	
					for i, Player in pairs(Players:GetPlayers()) do
						local Character = GetCharacter(Player);
	
						if Player ~= LocalPlayer and Player ~= Spectating and Character and Character:FindFirstChild'HumanoidRootPart' then
							local Head = Character:FindFirstChild'Head';
							local Humanoid = Character:FindFirstChildOfClass'Humanoid';
	
							if Head then
								local Distance  = (Camera.CFrame.Position - Head.Position).Magnitude;
	
								if Distance > Options.MaxDistance.Value then continue; end
	
								local Direction = -(Camera.CFrame.Position - Mouse.Hit.Position).unit;
								local Relative  = Character.Head.Position - Camera.CFrame.Position;
								local Unit      = Relative.unit;
	
								local DP = Direction:Dot(Unit);
	
								if DP > HD then
									HD = DP;
									LPlayer = Player;
									LCharacter = Character;
								end
							end
						end
					end
	
					if LPlayer and LPlayer ~= Spectating and LCharacter then
						Camera.CameraSubject = LCharacter.Head;
						Spectating = LPlayer;
					else
						if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass'Humanoid' then
							Camera.CameraSubject = LocalPlayer.Character:FindFirstChildOfClass'Humanoid';
							Spectating = nil;
						end
					end
				end
			end
		end)
	
		local function CameraCon() -- unnamed esp v1 sucks
			workspace.CurrentCamera:GetPropertyChangedSignal'ViewportSize':Connect(function()
				TracerPosition = V2New(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y - 135);
			end);
		end
	
		CameraCon();
	
		local function ToggleMenu()
			if Options.MenuOpen.Value then
				-- GUIService:SetMenuIsOpen(true);
				GetTableData(shared.MenuDrawingData.Instances)(function(i, v)
					if OldData[v] then
						pcall(Set, v, 'Visible', true);
					end
				end)
			else
				-- GUIService:SetMenuIsOpen(false);
				GetTableData(shared.MenuDrawingData.Instances)(function(i, v)
					OldData[v] = v.Visible;
					if v.Visible then
						pcall(Set, v, 'Visible', false);
					end
				end)
			end
		end
	
		local function CheckRay(Instance, Distance, Position, Unit)
			local Pass = true;
			local Model = Instance;
	
			if Distance > 999 then return false; end
	
			if Instance.ClassName == 'Player' then
				Model = GetCharacter(Instance);
			end
	
			if not Model then
				Model = Instance.Parent;
	
				if Model.Parent == workspace then
					Model = Instance;
				end
			end
	
			if not Model then return false end
	
			local _Ray = Ray.new(Position, Unit * Distance);
	
			local List = {LocalPlayer.Character, Camera, Mouse.TargetFilter};
	
			for i,v in pairs(IgnoreList) do table.insert(List, v); end;
	
			local Hit = workspace:FindPartOnRayWithIgnoreList(_Ray, List);
	
			if Hit and not Hit:IsDescendantOf(Model) then
				Pass = false;
				if Hit.Transparency >= .3 or not Hit.CanCollide and Hit.ClassName ~= Terrain then -- Detect invisible walls
					IgnoreList[#IgnoreList + 1] = Hit;
				end
			end
	
			return Pass;
		end
	
		local function CheckTeam(Player)
			if Player.Neutral and LocalPlayer.Neutral then return true; end
			return Player.TeamColor == LocalPlayer.TeamColor;
		end
	
		local CustomTeam = CustomTeams[game.PlaceId];
	
		if CustomTeam ~= nil then
			if CustomTeam.Initialize then ypcall(CustomTeam.Initialize) end
	
			CheckTeam = CustomTeam.CheckTeam;
		end
	
		local function CheckPlayer(Player, Character)
			if not Options.Enabled.Value then return false end
	
			local Pass = true;
			local Distance = 0;
	
			if Player ~= LocalPlayer and Character then
				if not Options.ShowTeam.Value and CheckTeam(Player) then
					Pass = false;
				end
	
				local Head = Character:FindFirstChild'Head';
	
				if Pass and Character and Head then
					Distance = (Camera.CFrame.Position - Head.Position).Magnitude;
					if Options.VisCheck.Value then
						Pass = CheckRay(Player, Distance, Camera.CFrame.Position, (Head.Position - Camera.CFrame.Position).unit);
					end
					if Distance > Options.MaxDistance.Value then
						Pass = false;
					end
				end
			else
				Pass = false;
			end
	
			return Pass, Distance;
		end
	
		local function CheckDistance(Instance)
			if not Options.Enabled.Value then return false end
	
			local Pass = true;
			local Distance = 0;
	
			if Instance ~= nil then
				Distance = (Camera.CFrame.Position - Instance.Position).Magnitude;
				if Options.VisCheck.Value then
					Pass = CheckRay(Instance, Distance, Camera.CFrame.Position, (Instance.Position - Camera.CFrame.Position).unit);
				end
				if Distance > Options.MaxDistance.Value then
					Pass = false;
				end
			else
				Pass = false;
			end
	
			return Pass, Distance;
		end
	
		local function UpdatePlayerData()
			if (tick() - LastRefresh) > (Options.RefreshRate.Value / 1000) then
				LastRefresh = tick();
				if CustomESP and Options.Enabled.Value then
					local a, b = pcall(CustomESP);
				end
				for i, v in pairs(RenderList.Instances) do
					if v.Instance ~= nil and v.Instance.Parent ~= nil and v.Instance:IsA'BasePart' then
						local Data = shared.InstanceData[v.Instance:GetDebugId()] or { Instances = {}; DontDelete = true };
	
						Data.Instance = v.Instance;
	
						Data.Instances['OutlineTracer'] = Data.Instances['OutlineTracer'] or NewDrawing'Line'{
							Transparency	= 0.75;
							Thickness		= 5;
							Color 			= Color3.new(0.1, 0.1, 0.1);
						}
						Data.Instances['Tracer'] = Data.Instances['Tracer'] or NewDrawing'Line'{
							Transparency	= 1;
							Thickness		= 2;
						}
						Data.Instances['NameTag'] = Data.Instances['NameTag'] or NewDrawing'Text'{
							Size			= Options.TextSize.Value;
							Center			= true;
							Outline			= Options.TextOutline.Value;
							Visible			= true;
						};
						Data.Instances['DistanceTag'] = Data.Instances['DistanceTag'] or NewDrawing'Text'{
							Size			= Options.TextSize.Value - 1;
							Center			= true;
							Outline			= Options.TextOutline.Value;
							Visible			= true;
						};
	
						local NameTag		= Data.Instances['NameTag'];
						local DistanceTag	= Data.Instances['DistanceTag'];
						local Tracer		= Data.Instances['Tracer'];
						local OutlineTracer	= Data.Instances['OutlineTracer'];
	
						local Pass, Distance = CheckDistance(v.Instance);
	
						if Pass then
							local ScreenPosition, Vis = WorldToViewport(v.Instance.Position);
							local Color = v.Color;
							local OPos = Camera.CFrame:pointToObjectSpace(v.Instance.Position);
	
							if ScreenPosition.Z < 0 then
								local AT = math.atan2(OPos.Y, OPos.X) + math.pi;
								OPos = CFrame.Angles(0, 0, AT):vectorToWorldSpace((CFrame.Angles(0, math.rad(89.9), 0):vectorToWorldSpace(V3New(0, 0, -1))));
							end
	
							local Position = WorldToViewport(Camera.CFrame:pointToWorldSpace(OPos));
	
							if Options.ShowTracers.Value then
								Tracer.Transparency = math.clamp(Distance / 200, 0.45, 0.8);
								Tracer.Visible	= true;
								Tracer.From		= TracerPosition;
								Tracer.To		= V2New(Position.X, Position.Y);
								Tracer.Color	= Color;
								OutlineTracer.Visible = true;
								OutlineTracer.Transparency = Tracer.Transparency - 0.1;
								OutlineTracer.From = Tracer.From;
								OutlineTracer.To = Tracer.To;
								OutlineTracer.Color	= Color3.new(0.1, 0.1, 0.1);
							else
								Tracer.Visible = false;
								OutlineTracer.Visible = false;
							end
	
							if ScreenPosition.Z > 0 then
								local ScreenPositionUpper = ScreenPosition;
	
								if Options.ShowName.Value then
									LocalPlayer.NameDisplayDistance = 0;
									NameTag.Visible		= true;
									NameTag.Text		= v.Text;
									NameTag.Size		= Options.TextSize.Value;
									NameTag.Outline		= Options.TextOutline.Value;
									NameTag.Position	= V2New(ScreenPositionUpper.X, ScreenPositionUpper.Y);
									NameTag.Color		= Color;
									if Drawing.Fonts and shared.am_ic3 then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
										NameTag.Font	= Drawing.Fonts.Monospace;
									end
								else
									LocalPlayer.NameDisplayDistance = 100;
									NameTag.Visible = false;
								end
								if Options.ShowDistance.Value or Options.ShowHealth.Value then
									DistanceTag.Visible		= true;
									DistanceTag.Size		= Options.TextSize.Value - 1;
									DistanceTag.Outline		= Options.TextOutline.Value;
									DistanceTag.Color		= Color3.new(1, 1, 1);
									if Drawing.Fonts and shared.am_ic3 then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
										NameTag.Font	= Drawing.Fonts.Monospace;
									end
	
									local Str = '';
	
									if Options.ShowDistance.Value then
										Str = Str .. Format('[%d] ', Distance);
									end
	
									DistanceTag.Text = Str;
									DistanceTag.Position = V2New(ScreenPositionUpper.X, ScreenPositionUpper.Y) + V2New(0, NameTag.TextBounds.Y);
								else
									DistanceTag.Visible = false;
								end
							else
								NameTag.Visible			= false;
								DistanceTag.Visible		= false;
							end
						else
							NameTag.Visible			= false;
							DistanceTag.Visible		= false;
							Tracer.Visible			= false;
							OutlineTracer.Visible	= false;
						end
	
						Data.Instances['NameTag'] 		= NameTag;
						Data.Instances['DistanceTag']	= DistanceTag;
						Data.Instances['Tracer']		= Tracer;
						Data.Instances['OutlineTracer']	= OutlineTracer;
	
						shared.InstanceData[v.Instance:GetDebugId()] = Data;
					end
				end
				for i, v in pairs(Players:GetPlayers()) do
					local Data = shared.InstanceData[v.Name] or { Instances = {}; };
	
					Data.Instances['Box'] = Data.Instances['Box'] or LineBox:Create{Thickness = 4};
					Data.Instances['OutlineTracer'] = Data.Instances['OutlineTracer'] or NewDrawing'Line'{
						Transparency	= 1;
						Thickness		= 3;
						Color			= Color3.new(0.1, 0.1, 0.1);
					}
					Data.Instances['Tracer'] = Data.Instances['Tracer'] or NewDrawing'Line'{
						Transparency	= 1;
						Thickness		= 1;
					}
					Data.Instances['HeadDot'] = Data.Instances['HeadDot'] or NewDrawing'Circle'{
						Filled			= true;
						NumSides		= 30;
					}
					Data.Instances['NameTag'] = Data.Instances['NameTag'] or NewDrawing'Text'{
						Size			= Options.TextSize.Value;
						Center			= true;
						Outline			= Options.TextOutline.Value;
						OutlineOpacity	= 1;
						Visible			= true;
					};
					Data.Instances['DistanceHealthTag'] = Data.Instances['DistanceHealthTag'] or NewDrawing'Text'{
						Size			= Options.TextSize.Value - 1;
						Center			= true;
						Outline			= Options.TextOutline.Value;
						OutlineOpacity	= 1;
						Visible			= true;
					};
	
					local NameTag		= Data.Instances['NameTag'];
					local DistanceTag	= Data.Instances['DistanceHealthTag'];
					local Tracer		= Data.Instances['Tracer'];
					local OutlineTracer	= Data.Instances['OutlineTracer'];
					local HeadDot		= Data.Instances['HeadDot'];
					local Box			= Data.Instances['Box'];
	
					local Character = GetCharacter(v);
					local Pass, Distance = CheckPlayer(v, Character);
	
					if Pass and Character then
						local Humanoid = Character:FindFirstChildOfClass'Humanoid';
						local Head = Character:FindFirstChild'Head';
						local HumanoidRootPart = Character:FindFirstChild'HumanoidRootPart';
						local Dead = Humanoid and Humanoid:GetState().Name == 'Dead';
	
						if Character ~= nil and Head and HumanoidRootPart and not Dead then
							local ScreenPosition, Vis = WorldToViewport(Head.Position);
							local Color = Rainbow and Color3.fromHSV(tick() * 128 % 255/255, 1, 1) or (CheckTeam(v) and TeamColor or EnemyColor); Color = Options.ShowTeamColor.Value and v.TeamColor.Color or Color;
							local OPos = Camera.CFrame:pointToObjectSpace(Head.Position);
	
							if ScreenPosition.Z < 0 then
								local AT = math.atan2(OPos.Y, OPos.X) + math.pi;
								OPos = CFrame.Angles(0, 0, AT):vectorToWorldSpace((CFrame.Angles(0, math.rad(89.9), 0):vectorToWorldSpace(V3New(0, 0, -1))));
							end
	
							local Position = WorldToViewport(Camera.CFrame:pointToWorldSpace(OPos));
	
							if Options.ShowTracers.Value then
								if TracerPosition.X >= Camera.ViewportSize.X or TracerPosition.Y >= Camera.ViewportSize.Y or TracerPosition.X < 0 or TracerPosition.Y < 0 then
									TracerPosition = V2New(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y - 135);
								end
	
								Tracer.Visible	= true;
								Tracer.Transparency = math.clamp(1 - (Distance / 200), 0.25, 0.75);
								Tracer.From		= TracerPosition;
								Tracer.To		= V2New(Position.X, Position.Y);
								Tracer.Color	= Color;
								OutlineTracer.From = Tracer.From;
								OutlineTracer.To = Tracer.To;
								OutlineTracer.Transparency = Tracer.Transparency - 0.15;
								OutlineTracer.Visible = true;
							else
								Tracer.Visible = false;
								OutlineTracer.Visible = false;
							end
	
							if ScreenPosition.Z > 0 then
								local ScreenPositionUpper	= WorldToViewport((HumanoidRootPart:GetRenderCFrame() * CFrame.new(0, Head.Size.Y + HumanoidRootPart.Size.Y + (Options.YOffset.Value / 25), 0)).Position);
								local Scale					= Head.Size.Y / 2;
	
								if Options.ShowName.Value then
									NameTag.Visible		= true;
									NameTag.Text		= v.Name .. (CustomPlayerTag and CustomPlayerTag(v) or '');
									NameTag.Size		= Options.TextSize.Value;
									NameTag.Outline		= Options.TextOutline.Value;
									NameTag.Position	= V2New(ScreenPositionUpper.X, ScreenPositionUpper.Y) - V2New(0, NameTag.TextBounds.Y);
									NameTag.Color		= Color;
									NameTag.Color		= Color;
									NameTag.OutlineColor= Color3.new(0.05, 0.05, 0.05);
									NameTag.Transparency= 0.85;
									if Drawing.Fonts and shared.am_ic3 then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
										NameTag.Font	= Drawing.Fonts.Monospace;
									end
								else
									NameTag.Visible = false;
								end
								if Options.ShowDistance.Value or Options.ShowHealth.Value then
									DistanceTag.Visible		= true;
									DistanceTag.Size		= Options.TextSize.Value - 1;
									DistanceTag.Outline		= Options.TextOutline.Value;
									DistanceTag.Color		= Color3.new(1, 1, 1);
									DistanceTag.Transparency= 0.85;
									if Drawing.Fonts and shared.am_ic3 then -- CURRENTLY SYNAPSE ONLY :MEGAHOLY:
										NameTag.Font	= Drawing.Fonts.Monospace;
									end
	
									local Str = '';
	
									if Options.ShowDistance.Value then
										Str = Str .. Format('[%d] ', Distance);
									end
									if Options.ShowHealth.Value and Humanoid then
										Str = Str .. Format('[%d/%d] [%s%%]', Humanoid.Health, Humanoid.MaxHealth, math.floor(Humanoid.Health / Humanoid.MaxHealth * 100));
									end
	
									DistanceTag.Text = Str;
									DistanceTag.OutlineColor = Color3.new(0.05, 0.05, 0.05);
									DistanceTag.Position = (NameTag.Visible and NameTag.Position + V2New(0, NameTag.TextBounds.Y) or V2New(ScreenPositionUpper.X, ScreenPositionUpper.Y));
								else
									DistanceTag.Visible = false;
								end
								if Options.ShowDot.Value and Vis then
									local Top			= WorldToViewport((Head.CFrame * CFrame.new(0, Scale, 0)).Position);
									local Bottom		= WorldToViewport((Head.CFrame * CFrame.new(0, -Scale, 0)).Position);
									local Radius		= (Top - Bottom).y;
	
									HeadDot.Visible		= true;
									HeadDot.Color		= Color;
									HeadDot.Position	= V2New(ScreenPosition.X, ScreenPosition.Y);
									HeadDot.Radius		= Radius;
								else
									HeadDot.Visible = false;
								end
								if Options.ShowBoxes.Value and Vis and HumanoidRootPart then
									local Body = {
										Head;
										Character:FindFirstChild'Left Leg' or Character:FindFirstChild'LeftLowerLeg';
										Character:FindFirstChild'Right Leg' or Character:FindFirstChild'RightLowerLeg';
										Character:FindFirstChild'Left Arm' or Character:FindFirstChild'LeftLowerArm';
										Character:FindFirstChild'Right Arm' or Character:FindFirstChild'RightLowerArm';
									}
									Box:Update(HumanoidRootPart.CFrame, V3New(2, 3, 1) * (Scale * 2), Color, nil, shared.am_ic3 and Body);
								else
									Box:SetVisible(false);
								end
							else
								NameTag.Visible			= false;
								DistanceTag.Visible		= false;
								HeadDot.Visible			= false;
	
								Box:SetVisible(false);
							end
						else
							NameTag.Visible			= false;
							DistanceTag.Visible		= false;
							HeadDot.Visible			= false;
							Tracer.Visible			= false;
							OutlineTracer.Visible 	= false;
	
							Box:SetVisible(false);
						end
					else
						NameTag.Visible			= false;
						DistanceTag.Visible		= false;
						HeadDot.Visible			= false;
						Tracer.Visible			= false;
						OutlineTracer.Visible 	= false;
	
						Box:SetVisible(false);
					end
	
					shared.InstanceData[v.Name] = Data;
				end
			end
		end
	
		local LastInvalidCheck = 0;
	
		local function Update()
			if tick() - LastInvalidCheck > 0.3 then
				LastInvalidCheck = tick();
	
				if Camera.Parent ~= workspace then
					Camera = workspace.CurrentCamera;
					CameraCon();
					WTVP = Camera.WorldToViewportPoint;
				end
	
				for i, v in pairs(shared.InstanceData) do
					if not Players:FindFirstChild(tostring(i)) then
						if not shared.InstanceData[i].DontDelete then
							GetTableData(v.Instances)(function(i, obj)
								obj.Visible = false;
								obj:Remove();
								v.Instances[i] = nil;
							end)
							shared.InstanceData[i] = nil;
						else
							if shared.InstanceData[i].Instance == nil or shared.InstanceData[i].Instance.Parent == nil then
								GetTableData(v.Instances)(function(i, obj)
									obj.Visible = false;
									obj:Remove();
									v.Instances[i] = nil;
								end)
								shared.InstanceData[i] = nil;
							end
						end
					end
				end
			end
	
			local CX = Menu:GetInstance'CrosshairX';
			local CY = Menu:GetInstance'CrosshairY';
	
			if Options.Crosshair.Value then
				CX.Visible = true;
				CY.Visible = true;
	
				CX.To = V2New((Camera.ViewportSize.X / 2) - 8, (Camera.ViewportSize.Y / 2));
				CX.From = V2New((Camera.ViewportSize.X / 2) + 8, (Camera.ViewportSize.Y / 2));
				CY.To = V2New((Camera.ViewportSize.X / 2), (Camera.ViewportSize.Y / 2) - 8);
				CY.From = V2New((Camera.ViewportSize.X / 2), (Camera.ViewportSize.Y / 2) + 8);
			else
				CX.Visible = false;
				CY.Visible = false;
			end
	
			if Options.MenuOpen.Value and MenuLoaded then
				local MLocation = GetMouseLocation();
				shared.MenuDrawingData.Instances.Main.Color = Color3.fromHSV(tick() * 24 % 255/255, 1, 1);
				local MainInstance = Menu:GetInstance'Main';
	
				local Values = {
					MainInstance.Position.X;
					MainInstance.Position.Y;
					MainInstance.Position.X + MainInstance.Size.X;
					MainInstance.Position.Y + MainInstance.Size.Y;
				};
	
				if MainInstance and (MouseHoveringOver(Values) or (SubMenu.Open and MouseHoveringOver(SubMenu.Bounds))) then
					Debounce.CursorVis = true;
	
					Menu:UpdateMenuInstance'Cursor1'{
						Visible	= true;
						From	= V2New(MLocation.x, MLocation.y);
						To		= V2New(MLocation.x + 5, MLocation.y + 6);
					}
					Menu:UpdateMenuInstance'Cursor2'{
						Visible	= true;
						From	= V2New(MLocation.x, MLocation.y);
						To		= V2New(MLocation.x, MLocation.y + 8);
					}
					Menu:UpdateMenuInstance'Cursor3'{
						Visible	= true;
						From	= V2New(MLocation.x, MLocation.y + 6);
						To		= V2New(MLocation.x + 5, MLocation.y + 5);
					}
				else
					if Debounce.CursorVis then
						Debounce.CursorVis = false;
	
						Menu:UpdateMenuInstance'Cursor1'{Visible = false};
						Menu:UpdateMenuInstance'Cursor2'{Visible = false};
						Menu:UpdateMenuInstance'Cursor3'{Visible = false};
					end
				end
				if MouseHeld then
					local MousePos = GetMouseLocation();
	
					if Dragging then
						DraggingWhat.Slider.Position = V2New(math.clamp(MLocation.X - DraggingWhat.Slider.Size.X / 2, DraggingWhat.Line.Position.X, DraggingWhat.Line.Position.X + DraggingWhat.Line.Size.X - DraggingWhat.Slider.Size.X), DraggingWhat.Slider.Position.Y);
						local Percent	= (DraggingWhat.Slider.Position.X - DraggingWhat.Line.Position.X) / ((DraggingWhat.Line.Position.X + DraggingWhat.Line.Size.X - DraggingWhat.Line.Position.X) - DraggingWhat.Slider.Size.X);
						local Value		= CalculateValue(DraggingWhat.Min, DraggingWhat.Max, Percent);
						DraggingWhat.Option(Value);
					elseif DraggingUI then
						Debounce.UIDrag = true;
						local Main = Menu:GetInstance'Main';
						Main.Position = MousePos + DragOffset;
					elseif DragTracerPosition then
						TracerPosition = MousePos;
					end
				else
					Dragging = false;
					DragTracerPosition = false;
					if DraggingUI and Debounce.UIDrag then
						Debounce.UIDrag = false;
						DraggingUI = false;
						CreateMenu(Menu:GetInstance'Main'.Position);
					end
				end
				if not Debounce.Menu then
					Debounce.Menu = true;
					ToggleMenu();
				end
			elseif Debounce.Menu and not Options.MenuOpen.Value then
				Debounce.Menu = false;
				ToggleMenu();
			end
		end
	
		RunService:UnbindFromRenderStep(GetDataName);
		RunService:UnbindFromRenderStep(UpdateName);
	
		RunService:BindToRenderStep(GetDataName, 300, UpdatePlayerData);
		RunService:BindToRenderStep(UpdateName, 199, Update);
	end)
end
coroutine.wrap(SYSUT_fake_script)()
local function AARUTAX_fake_script() -- infjump.LocalScript 
	local script = Instance.new('LocalScript', infjump)

	script.Parent.MouseButton1Click:Connect(function()
		_G.infinjump = true
	
	local Player = game:GetService("Players").LocalPlayer
	local Mouse = Player:GetMouse()
	Mouse.KeyDown:connect(function(k)
		if _G.infinjump then
			if k:byte() == 32 then
				Humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				Humanoid:ChangeState("Jumping")
				wait(0.1)
				Humanoid:ChangeState("Seated")
			end
		end
	end)
	
	local Player = game:GetService("Players").LocalPlayer
	local Mouse = Player:GetMouse()
	Mouse.KeyDown:connect(function(k)
		k = k:lower()
		if k == "m" then
			if _G.infinjump == true then
				_G.infinjump = false
			else
				_G.infinjump = true
			end
		end
		end)
		end)
end
coroutine.wrap(AARUTAX_fake_script)()
local function EVWIAGS_fake_script() -- CraftAnyItem.LocalScript 
	local script = Instance.new('LocalScript', CraftAnyItem)

	script.Parent.MouseButton1Click:connect(function()
		local event = game.ReplicatedStorage.Events.CraftItem
		local item = script.Parent.Parent.CraftItem.Text
		event:FireServer(item)
	end)
end
coroutine.wrap(EVWIAGS_fake_script)()
local function EVHKAH_fake_script() -- Speed.LocalScript 
	local script = Instance.new('LocalScript', Speed)

	--SpeedVariables
	local plr = game:GetService("Players").LocalPlayer
	local char = plr.Character
	local mouse = game:GetService("Players").LocalPlayer:GetMouse()
	local hum = char:FindFirstChild("HumanoidRootPart")
	--yeet
	script.Parent.MouseButton1Down:connect(function()
		local plr = game:GetService("Players").LocalPlayer
		local char = plr.Character
		local mouse = game:GetService("Players").LocalPlayer:GetMouse()
		local hum = char:FindFirstChild("HumanoidRootPart")
		mouse.KeyDown:connect(function(key)
			if key == script.Parent.Parent.SpeedBind.Text then
				loop = true
				while loop do
					hum.CFrame = hum.CFrame + hum.CFrame.lookVector * 3
					wait()
				end
			end
		end)
	end)
	
	mouse.KeyUp:connect(function(key)
		if key == script.Parent.Parent.SpeedBind.Text then
			loop = false
		end
	end)
end
coroutine.wrap(EVHKAH_fake_script)()
local function DSQCQS_fake_script() -- infyield.LocalScript 
	local script = Instance.new('LocalScript', infyield)

	script.Parent.MouseButton1Click:Connect(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source", true))()
	end)
end
coroutine.wrap(DSQCQS_fake_script)()
local function DDDL_fake_script() -- clicktp.LocalScript 
	local script = Instance.new('LocalScript', clicktp)

	script.Parent.MouseButton1Click:Connect(function()
		local plr = game.Players.LocalPlayer 
		local hum = plr.Character.HumanoidRootPart
		local mouse = plr:GetMouse() 
		mouse.KeyDown:connect(function(key) 
			if key == "f" then 
				if mouse.Target then 
					hum.CFrame = CFrame.new(mouse.Hit.x, mouse.Hit.y + 5, mouse.Hit.z) 
				end 
			end 
		end)
	end)
end
coroutine.wrap(DDDL_fake_script)()
local function ONGVJJ_fake_script() -- antiban.LocalScript 
	local script = Instance.new('LocalScript', antiban)

	script.Parent.MouseButton1Click:Connect(function()
		script.Parent.Parent.Parent.Parent.ah.Visible = true
	end)
end
coroutine.wrap(ONGVJJ_fake_script)()
local function EJNZKYV_fake_script() -- wall.LocalScript 
	local script = Instance.new('LocalScript', wall)

	script.Parent.MouseButton1Click:Connect(function()
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		local h = game.Players.LocalPlayer.Character.LowerTorso.Position
		local aa = h.x + 13
		local bb = h.y - 2
		local cc = h.z
		local aaa = h.x - 13
		local bbb = h.y - 2
		local ccc = h.z
		local aaaa = h.x
		local bbbb = h.y - 2
		local cccc = h.z + 13
		local aaaaa = h.x
		local bbbbb = h.y - 2
		local ccccc = h.z - 13
		local k_1 = "Stone Wall"
		local k_2 = CFrame.new(aaaa, bbbb, cccc, -0.99862951, 9.53660761e-12, 0.0523360483, -9.54969524e-12, 1, 2.71050543e-20, -0.0523360483, 4.99793241e-13, -0.99862951)
		local k_3 = 177
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		Event:FireServer(k_1, k_2, k_3)
		local l_1 = "Stone Wall"
		local l_2 = CFrame.new(aaaaa, bbbbb, ccccc, -0.99862951, 9.53660761e-12, 0.0523360483, -9.54969524e-12, 1, 2.71050543e-20, -0.0523360483, 4.99793241e-13, -0.99862951)
		local l_3 = 177
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		Event:FireServer(l_1, l_2, l_3)
		local m_1 = "Stone Wall"
		local m_2 = CFrame.new(aaa, bbb, ccc, 1.19248806e-08, 3.87430191e-06, -1, 4.62005888e-14, 1, -3.87430191e-06, 1, 0, 1.19248806e-08)
		local m_3 = 270
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		Event:FireServer(m_1, m_2, m_3)
		local n_1 = "Stone Wall"
		local n_2 = CFrame.new(aa, bb, cc, 1.19248806e-08, 3.87430191e-06, -1, 4.62005888e-14, 1, -3.87430191e-06, 1, 0, 1.19248806e-08)
		local n_3 = 270
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		Event:FireServer(n_1, n_2, n_3)
	end)
end
coroutine.wrap(EJNZKYV_fake_script)()
local function HEJZB_fake_script() -- autocamp.LocalScript 
	local script = Instance.new('LocalScript', autocamp)

	script.Parent.MouseButton1Click:Connect(function()
		local Fires = 1
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		local h = game.Players.LocalPlayer.Character.LowerTorso.Position
		local c = h.x + 5
		local d = h.y - 2
		local e = h.z
		local j = h.x
		local k = h.y - 2
		local l = h.z
		local aa = h.x - 5
		local bb = h.y - 2
		local cc = h.z
		local aaa = h.x
		local bbb = h.y - 2
		local ccc = h.z + 5
		local aaaa = h.x
		local bbbb = h.y - 2
		local cccc = h.z - 5
		for i = 1,1 do
			local C_1 = "Chest"
			local C_2 = CFrame.new(j, k, l, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local C_3 = 0
			Event:FireServer(C_1, C_2, C_3)
		end
		for i = 1,Fires do
			local A_1 = "Campfire"
			local A_2 = CFrame.new(c, d, e, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local A_3 = 0
			Event:FireServer(A_1, A_2, A_3)
		end
		for i = 1,Fires do
			local B_1 = "Campfire"
			local B_2 = CFrame.new(aa, bb, cc, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local B_3 = 0
			Event:FireServer(B_1, B_2, B_3)
		end
		for i = 1,Fires do
			local D_1 = "Campfire"
			local D_2 = CFrame.new(aaa, bbb, ccc, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local D_3 = 0
			Event:FireServer(D_1, D_2, D_3)
		end
		for i = 1,Fires do
			local E_1 = "Campfire"
			local E_2 = CFrame.new(aaaa, bbbb, cccc, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local E_3 = 0
			Event:FireServer(E_1, E_2, E_3)
		end
	end)
end
coroutine.wrap(HEJZB_fake_script)()
local function SDVOQ_fake_script() -- dropitemos.LocalScript 
	local script = Instance.new('LocalScript', dropitemos)

	script.Parent.MouseButton1Click:Connect(function()
	
		local Player = game.Players.LocalPlayer
		local Mouse = Player:GetMouse()
	
		function PressedE(key)
			local Key = key:lower()
			if Key == script.Parent.Parent.itemkeybind.Text then
				for i=1, 100 do
					game.ReplicatedStorage.Events.DropBagItem:FireServer(script.Parent.Parent.itemname.Text)
				end
			end
		end
		Mouse.KeyDown:connect(PressedE)
	end)
end
coroutine.wrap(SDVOQ_fake_script)()
local function LNRKBRV_fake_script() -- tpspam.LocalScript 
	local script = Instance.new('LocalScript', tpspam)

	script.Parent.MouseButton1Down:connect(function()
		for i,v in pairs(game:GetService("Players"):GetChildren()) do
			if v.Name:lower():find(script.Parent.Parent.Parent.Parent.h.Frame.tpspamus.Text:lower()) then
				if v.Name == "Infinity_Chest" or v.Name == "BlueBearTimx" then
					print("No Possibility Of Killing The Devs.")
				else
				local player = game.Players.LocalPlayer.Character
					repeat
						player.HumanoidRootPart.CFrame = v.Character.HumanoidRootPart.CFrame
						wait(.001)
					until v.Character.Humanoid.Health <= 0
				end
			end
		end
	end)
end
coroutine.wrap(LNRKBRV_fake_script)()
local function VTND_fake_script() -- chest.LocalScript 
	local script = Instance.new('LocalScript', chest)

	script.Parent.MouseButton1Click:Connect(function()
		local Fires = 1
		local Event = game:GetService("ReplicatedStorage").Events.PlaceStructure
		local h = game.Players.LocalPlayer.Character.LowerTorso.Position
		local c = h.x + 5
		local d = h.y - 2
		local e = h.z
		local j = h.x
		local k = h.y - 2
		local l = h.z
		local aa = h.x - 5
		local bb = h.y - 2
		local cc = h.z
		local aaa = h.x
		local bbb = h.y - 2
		local ccc = h.z + 5
		local aaaa = h.x
		local bbbb = h.y - 2
		local cccc = h.z - 5
		for i = 1,1 do
			local C_1 = "Chest"
			local C_2 = CFrame.new(j, k, l, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local C_3 = 0
			Event:FireServer(C_1, C_2, C_3)
		end
		for i = 1,Fires do
			local A_1 = ""
			local A_2 = CFrame.new(c, d, e, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local A_3 = 0
			Event:FireServer(A_1, A_2, A_3)
		end
		for i = 1,Fires do
			local B_1 = ""
			local B_2 = CFrame.new(aa, bb, cc, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local B_3 = 0
			Event:FireServer(B_1, B_2, B_3)
		end
		for i = 1,Fires do
			local D_1 = ""
			local D_2 = CFrame.new(aaa, bbb, ccc, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local D_3 = 0
			Event:FireServer(D_1, D_2, D_3)
		end
		for i = 1,Fires do
			local E_1 = ""
			local E_2 = CFrame.new(aaaa, bbbb, cccc, 1, 0, 0, 0, 1, -5.56028681e-08, 0, -5.56028681e-08, 1)
			local E_3 = 0
			Event:FireServer(E_1, E_2, E_3)
		end
	end)
end
coroutine.wrap(VTND_fake_script)()
local function NLHJ_fake_script() -- goober.LocalScript 
	local script = Instance.new('LocalScript', goober)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Goober Bag"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(NLHJ_fake_script)()
local function JRZXZYV_fake_script() -- magm.LocalScript 
	local script = Instance.new('LocalScript', magm)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Magnetite Mask"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(JRZXZYV_fake_script)()
local function OAFMOZL_fake_script() -- magg.LocalScript 
	local script = Instance.new('LocalScript', magg)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Magnetite Greaves"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(OAFMOZL_fake_script)()
local function CXZK_fake_script() -- magc.LocalScript 
	local script = Instance.new('LocalScript', magc)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Magnetite Chestplate"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(CXZK_fake_script)()
local function BJCAO_fake_script() -- peep.LocalScript 
	local script = Instance.new('LocalScript', peep)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Peeper Popsicle"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(BJCAO_fake_script)()
local function HNOMQR_fake_script() -- rad.LocalScript 
	local script = Instance.new('LocalScript', rad)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Radio Pack"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(HNOMQR_fake_script)()
local function YYDGXZ_fake_script() -- magb.LocalScript 
	local script = Instance.new('LocalScript', magb)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Magnetite Bar"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(YYDGXZ_fake_script)()
local function KQLFV_fake_script() -- spirkey.LocalScript 
	local script = Instance.new('LocalScript', spirkey)

	script.Parent.MouseButton1Click:Connect(function()
		local Item = "Spirit Key"
		local amount = 1.1
		local price = 100000
		game:GetService("ReplicatedStorage").Events.SubmitTrade:FireServer(Item, amount, price)
	end)
end
coroutine.wrap(KQLFV_fake_script)()
local function CIVPGF_fake_script() -- rain.LocalScript 
	local script = Instance.new('LocalScript', rain)

	script.Parent.MouseButton1Click:Connect(function()
		if workspace:FindFirstChild('RainPart') ~= nil then
			workspace.RainPart:Destroy()
			game.ReplicatedStorage.Sounds.Nature.Rain:Stop()
			game.ReplicatedStorage.Sounds.Nature.Thunder:Stop()
			game.Lighting.Rain:Destroy()
			game.ReplicatedStorage.Skies.Shine:Clone().Parent = game.Lighting
		end
	end)
end
coroutine.wrap(CIVPGF_fake_script)()
local function TMLCTAW_fake_script() -- plant.LocalScript 
	local script = Instance.new('LocalScript', plant)

	script.Parent.MouseButton1Click:Connect(function()
		local Player = game:GetService("Players").LocalPlayer
		local Mouse = Player:GetMouse()
	
		for _, v in pairs(workspace.Deployables:GetChildren()) do
			if v.Name == "Plant Box" and (Player.Character.Head.Position - v.PrimaryPart.Position).magnitude < 500 then
				game.ReplicatedStorage.Events.InteractStructure:FireServer(v, script.Parent.Parent.frname.Text)
			end
		end
	end)
end
coroutine.wrap(TMLCTAW_fake_script)()
local function XXUB_fake_script() -- h.LocalScript 
	local script = Instance.new('LocalScript', h)

	script.Parent.Active = true
	script.Parent.Draggable = true
end
coroutine.wrap(XXUB_fake_script)()
